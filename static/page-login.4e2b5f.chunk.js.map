{"version":3,"file":"page-login.4e2b5f.chunk.js","mappings":"4NAUO,SAASA,IACZ,MAAMC,GAAc,WACbC,EAAOC,IAAY,IAAAC,UAAiB,KACpCC,EAAUC,IAAe,IAAAF,UAAiB,IAC3CG,GAAY,QAAwE,KAEpFC,GAAW,IAAAC,cACZC,IACGA,EAAIC,iBAEJJ,EACKK,QAAQV,EAAOG,GACfQ,MAAMC,IACH,MAAM,KAACC,GAAQD,EAEfb,EAAYe,QAAQD,EAAK,IAE5BE,MAAM,KAAW,GAE1B,CAACf,EAAOG,EAAUE,EAAWN,IAGjC,OACI,kBAAMiB,OAAQ,WAAcV,SAAUA,EAAQ,WAC1C,yBAAMW,KAAKC,UAAUnB,EAAa,KAAM,MACxC,yBAAMkB,KAAKC,UAAUb,EAAW,KAAM,MAEtC,8BACI,kCACA,kBACIc,QAAUX,IACNP,EAASO,EAAIY,cAAcC,MAAM,EAErCC,YAAY,QACZC,KAAK,aAGb,8BACI,qCACA,kBACIJ,QAAUX,IACNJ,EAAYI,EAAIY,cAAcC,MAAM,EAExCC,YAAY,WACZC,KAAK,YAIZlB,EAAUmB,OAAQ,wCAAuB,OAE1C,mBAEA,mBAAQD,KAAK,SAAQ,sBAGjC,C","sources":["webpack://typescript-project/./www/page/service/login/login.tsx"],"sourcesContent":["/* global HTMLFormElement, HTMLInputElement */\r\nimport {SyntheticEvent, useCallback, useState} from 'react';\r\n\r\nimport {useUserContext} from '../../../provider/user/user-context';\r\nimport {useMakeExecutableState} from '../../../util/function';\r\nimport {LoginResponseType} from '../../../service/auth/auth-type';\r\nimport {loginUser} from '../../../service/auth/auth-api';\r\nimport {throwError} from '../../../util/error';\r\nimport {apiUrl} from '../../../../server/const';\r\n\r\nexport function Login(): JSX.Element {\r\n    const userContext = useUserContext();\r\n    const [login, setLogin] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const loginHook = useMakeExecutableState<Parameters<typeof loginUser>, LoginResponseType>(loginUser);\r\n\r\n    const onSubmit = useCallback(\r\n        (evt: SyntheticEvent<HTMLFormElement>) => {\r\n            evt.preventDefault();\r\n\r\n            loginHook\r\n                .execute(login, password)\r\n                .then((loginResponse: LoginResponseType) => {\r\n                    const {user} = loginResponse;\r\n\r\n                    userContext.setUser(user);\r\n                })\r\n                .catch(throwError);\r\n        },\r\n        [login, password, loginHook, userContext]\r\n    );\r\n\r\n    return (\r\n        <form action={apiUrl.login} onSubmit={onSubmit}>\r\n            <pre>{JSON.stringify(userContext, null, 4)}</pre>\r\n            <pre>{JSON.stringify(loginHook, null, 4)}</pre>\r\n\r\n            <label>\r\n                <p>login</p>\r\n                <input\r\n                    onInput={(evt: SyntheticEvent<HTMLInputElement>) => {\r\n                        setLogin(evt.currentTarget.value);\r\n                    }}\r\n                    placeholder=\"login\"\r\n                    type=\"text\"\r\n                />\r\n            </label>\r\n            <label>\r\n                <p>password</p>\r\n                <input\r\n                    onInput={(evt: SyntheticEvent<HTMLInputElement>) => {\r\n                        setPassword(evt.currentTarget.value);\r\n                    }}\r\n                    placeholder=\"password\"\r\n                    type=\"text\"\r\n                />\r\n            </label>\r\n\r\n            {loginHook.error ? <h3>ERROR login</h3> : '???'}\r\n\r\n            <br />\r\n\r\n            <button type=\"submit\">submit</button>\r\n        </form>\r\n    );\r\n}\r\n"],"names":["Login","userContext","login","setLogin","useState","password","setPassword","loginHook","onSubmit","useCallback","evt","preventDefault","execute","then","loginResponse","user","setUser","catch","action","JSON","stringify","onInput","currentTarget","value","placeholder","type","error"],"sourceRoot":""}
{"version":3,"file":"225.4e2b5f.chunk.js","mappings":"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","sources":["webpack://typescript-project/./www/layout/box/box-helper.ts","webpack://typescript-project/./www/layout/box/box.tsx","webpack://typescript-project/./www/page/cms/cms-article/cms-article-const.ts","webpack://typescript-project/./www/page/cms/cms-article/cms-article-helper.tsx","webpack://typescript-project/./www/layout/markdown-input-wrapper/markdown-input-wrapper.tsx","webpack://typescript-project/./www/layout/markdown-input-wrapper/markdown-input-wrapper.scss?1209","webpack://typescript-project/./www/page/cms/cms-article/cms-article-layout.tsx","webpack://typescript-project/./www/page/cms/cms-article/render-uploaded-file-list-item.tsx","webpack://typescript-project/./www/page/cms/cms-article/cms-article.tsx","webpack://typescript-project/./www/page/cms/layout/cms-page/cms-page.tsx"],"sourcesContent":["// eslint-disable-next-line complexity\r\nexport function makeCssArray(value?: Array<number> | number): [number, number, number, number] {\r\n    if (typeof value === 'number') {\r\n        return [value, value, value, value];\r\n    }\r\n\r\n    if (!Array.isArray(value)) {\r\n        return [0, 0, 0, 0];\r\n    }\r\n\r\n    const arrayLength = value.length;\r\n\r\n    switch (arrayLength) {\r\n        case 0: {\r\n            return [0, 0, 0, 0];\r\n        }\r\n        case 1: {\r\n            return [value[0], value[0], value[0], value[0]];\r\n        }\r\n        case 2: {\r\n            return [value[0], value[1], value[0], value[1]];\r\n        }\r\n        case 3: {\r\n            return [value[0], value[1], value[2], value[1]];\r\n        }\r\n        case 4: {\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n        default: {\r\n            console.error('makeCssArray: too big array');\r\n            return [value[0], value[1], value[2], value[3]];\r\n        }\r\n    }\r\n}\r\n","import {ReactNode, ElementType, CSSProperties} from 'react';\r\n\r\nimport {makeCssArray} from './box-helper';\r\n\r\ntype BoxPropsType = {\r\n    backgroundColor?: string;\r\n    boxSizing?: 'border-box' | 'content-box' | 'initial';\r\n    children?: ReactNode;\r\n    display?: 'block' | 'flex' | 'inline';\r\n    height?: number | string;\r\n    margin?: Array<number> | number;\r\n    padding?: Array<number> | number;\r\n    tagName?: ElementType;\r\n    width?: number | string;\r\n};\r\n\r\nexport function Box(props: BoxPropsType): JSX.Element {\r\n    const {\r\n        tagName: TagName = 'div',\r\n        children,\r\n        margin,\r\n        padding,\r\n        width,\r\n        height,\r\n        boxSizing,\r\n        backgroundColor,\r\n        display,\r\n    } = props;\r\n\r\n    const [marginTop, marginRight, marginBottom, marginLeft, paddingTop, paddingRight, paddingBottom, paddingLeft] = [\r\n        ...makeCssArray(margin),\r\n        ...makeCssArray(padding),\r\n    ].map((value: number): string => `${value}px`);\r\n\r\n    const style: CSSProperties = {\r\n        backgroundColor,\r\n        boxSizing,\r\n        display,\r\n        height,\r\n        marginBottom,\r\n        marginLeft,\r\n        marginRight,\r\n        marginTop,\r\n        paddingBottom,\r\n        paddingLeft,\r\n        paddingRight,\r\n        paddingTop,\r\n        width,\r\n    };\r\n\r\n    return <TagName style={style}>{children}</TagName>;\r\n}\r\n","import {KeyForValidationListType} from './cms-article-type';\r\n\r\nexport const enum CmsArticleModeEnum {\r\n    create = 'create',\r\n    edit = 'edit',\r\n}\r\n\r\nexport const keyForValidationList: KeyForValidationListType = ['id', 'slug', 'subDocumentIdList', 'title'];\r\nexport const noDateUTC = '0000-00-00T00:00:00.000Z';\r\n\r\nexport const imageAccept = 'image/png, image/jpeg, image/gif, image/webp';\r\nexport const fileAccept = `${imageAccept}, audio/mp3, audio/wav`;\r\nexport const imageFileSizeLimit = 16e6;\r\nexport const fileSizeLimit = 75e6;\r\n","/* global document, Image, HTMLImageElement, Audio, HTMLAudioElement, HTMLVideoElement, File, FormData, location */\r\nimport {Rule, RuleObject} from 'rc-field-form/lib/interface';\r\n\r\nimport {generatePath} from '../../../util/url';\r\nimport {textToSlug} from '../../../util/human';\r\nimport {appRoute} from '../../../component/app/app-route';\r\nimport {PromiseResolveType} from '../../../util/promise';\r\nimport {apiUrl} from '../../../../server/const';\r\nimport {FetchMethodEnum, fetchX} from '../../../util/fetch';\r\nimport {deleteArticle} from '../../../service/article/article-api';\r\nimport {ArticleFileType, ArticleFileTypeEnum} from '../../../../server/article/article-type';\r\nimport {makeArticleFileSchema} from '../../../../server/article/article-validation';\r\nimport {NeverError} from '../../../util/error';\r\n\r\nimport {getPathToFile} from '../../../util/path';\r\n\r\nimport {ArticleForValidationType, MakeSlugValidatorArgumentType} from './cms-article-type';\r\nimport {CmsArticleModeEnum} from './cms-article-const';\r\n\r\nexport function fetchImage(pathToImage: string): Promise<HTMLImageElement> {\r\n    const image = new Image();\r\n\r\n    return new Promise<HTMLImageElement>(\r\n        (resolve: PromiseResolveType<HTMLImageElement>, reject: PromiseResolveType<unknown>) => {\r\n            image.addEventListener('load', () => resolve(image), false);\r\n\r\n            image.addEventListener('error', reject, false);\r\n\r\n            image.src = pathToImage;\r\n        }\r\n    );\r\n}\r\n\r\nexport function fetchAudio(pathToAudio: string): Promise<HTMLAudioElement> {\r\n    const audio = new Audio();\r\n\r\n    return new Promise<HTMLAudioElement>(\r\n        (resolve: PromiseResolveType<HTMLAudioElement>, reject: PromiseResolveType<unknown>) => {\r\n            audio.addEventListener('loadedmetadata', () => resolve(audio), false);\r\n\r\n            audio.addEventListener('error', reject, false);\r\n\r\n            audio.preload = 'metadata';\r\n            audio.src = pathToAudio;\r\n        }\r\n    );\r\n}\r\n\r\nexport function fetchVideo(pathToVideo: string): Promise<HTMLVideoElement> {\r\n    const video: HTMLVideoElement = document.createElement('video');\r\n\r\n    return new Promise<HTMLVideoElement>(\r\n        (resolve: PromiseResolveType<HTMLVideoElement>, reject: PromiseResolveType<unknown>) => {\r\n            video.addEventListener('loadedmetadata', () => resolve(video), false);\r\n\r\n            video.addEventListener('error', reject, false);\r\n\r\n            video.preload = 'metadata';\r\n            video.src = pathToVideo;\r\n        }\r\n    );\r\n}\r\n\r\n// eslint-disable-next-line complexity\r\nexport async function uploadFile(file: File, fileSizeLimitBytes: number): Promise<ArticleFileType> {\r\n    const formData = new FormData();\r\n\r\n    if (file.size >= fileSizeLimitBytes) {\r\n        throw new Error(`Too big file, limit ${fileSizeLimitBytes / 1e6}MB`);\r\n    }\r\n\r\n    formData.append('file', file);\r\n\r\n    const fileInfo: ArticleFileType = await fetchX<ArticleFileType>(apiUrl.adminFileUpload, makeArticleFileSchema(), {\r\n        body: formData,\r\n        credentials: 'include',\r\n        method: FetchMethodEnum.post,\r\n    });\r\n\r\n    const pathToFile = getPathToFile(fileInfo.name);\r\n\r\n    switch (fileInfo.type) {\r\n        case ArticleFileTypeEnum.image: {\r\n            const {naturalHeight, naturalWidth} = await fetchImage(pathToFile);\r\n\r\n            return {\r\n                ...fileInfo,\r\n                height: naturalHeight,\r\n                width: naturalWidth,\r\n            };\r\n        }\r\n        case ArticleFileTypeEnum.audio: {\r\n            const {duration} = await fetchAudio(pathToFile);\r\n\r\n            return {\r\n                ...fileInfo,\r\n                duration,\r\n            };\r\n        }\r\n\r\n        case ArticleFileTypeEnum.video: {\r\n            const {duration, videoWidth, videoHeight} = await fetchVideo(pathToFile);\r\n\r\n            return {\r\n                ...fileInfo,\r\n                duration,\r\n                height: videoHeight,\r\n                width: videoWidth,\r\n            };\r\n        }\r\n\r\n        case ArticleFileTypeEnum.unknown: {\r\n            return fileInfo;\r\n        }\r\n\r\n        default: {\r\n            throw new NeverError(fileInfo.type);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-unreachable\r\n    return fileInfo;\r\n}\r\n\r\nexport function makeSlugValidator(data: MakeSlugValidatorArgumentType): Array<Rule> {\r\n    const {id, mode, savedArticleList} = data;\r\n\r\n    return [\r\n        {\r\n            message: 'Required!',\r\n            required: true,\r\n        },\r\n        {\r\n            message: 'Please-enter-slug-properly.',\r\n            validator: async (rule: RuleObject, value: string) => {\r\n                if (textToSlug(value) !== value) {\r\n                    throw new Error('Slug is not formatted.');\r\n                }\r\n            },\r\n        },\r\n        {\r\n            message: 'Please enter another slug. This slug already exists.',\r\n            // eslint-disable-next-line complexity\r\n            validator: async (rule: RuleObject, value: string) => {\r\n                const savedArticleBySlugList: Array<ArticleForValidationType> = savedArticleList.filter(\r\n                    (savedArticle: ArticleForValidationType): boolean => {\r\n                        return savedArticle.slug === value;\r\n                    }\r\n                );\r\n\r\n                const savedArticleBySlugListLength = savedArticleBySlugList.length;\r\n\r\n                if (savedArticleBySlugListLength === 0) {\r\n                    return;\r\n                }\r\n\r\n                if (savedArticleBySlugListLength >= 2) {\r\n                    throw new Error('There are should be only one no non articles');\r\n                }\r\n\r\n                const isSavedArticle: boolean = savedArticleBySlugListLength > 0;\r\n\r\n                if (mode === CmsArticleModeEnum.create && isSavedArticle) {\r\n                    throw new Error('Use unique slug.');\r\n                }\r\n\r\n                const [savedArticleForValidation] = savedArticleBySlugList;\r\n\r\n                if (\r\n                    mode === CmsArticleModeEnum.edit &&\r\n                    savedArticleForValidation.slug === value &&\r\n                    savedArticleForValidation.id !== id\r\n                ) {\r\n                    throw new Error('Article with your slug already exists');\r\n                }\r\n            },\r\n        },\r\n    ];\r\n}\r\n\r\nexport function makeHtmlValidator(): Array<Rule> {\r\n    return [\r\n        {\r\n            message: 'Invalid HTML.',\r\n            validator: async (rule: RuleObject, value: string) => {\r\n                if (typeof document === 'undefined') {\r\n                    return;\r\n                }\r\n\r\n                const wrapper = document.createElement('div');\r\n\r\n                wrapper.innerHTML = value;\r\n\r\n                if (wrapper.innerHTML.trim() === value.trim()) {\r\n                    return;\r\n                }\r\n\r\n                throw new Error('HTML is not valid');\r\n            },\r\n        },\r\n    ];\r\n}\r\n\r\nexport function getArticleLinkToEdit(articleId: string): string {\r\n    return generatePath<typeof appRoute.articleEdit.path>(appRoute.articleEdit.path, {articleId});\r\n}\r\n\r\nexport function getFileExtension(fileName: string): string {\r\n    const hasExtension = fileName.includes('.');\r\n\r\n    if (!hasExtension) {\r\n        return '';\r\n    }\r\n\r\n    return (fileName.split('.').pop() || '').toLowerCase();\r\n}\r\n\r\nexport function getIsImage(fileName: string): boolean {\r\n    const fileExtension = getFileExtension(fileName);\r\n\r\n    return ['jpg', 'jpeg', 'jfif', 'gif', 'png', 'webp'].includes(fileExtension);\r\n}\r\n\r\nexport function getIsAudio(fileName: string): boolean {\r\n    const fileExtension = getFileExtension(fileName);\r\n\r\n    return ['mp3', 'wav'].includes(fileExtension);\r\n}\r\n\r\nexport function getIsVideo(fileName: string): boolean {\r\n    const fileExtension = getFileExtension(fileName);\r\n\r\n    return ['mp4'].includes(fileExtension);\r\n}\r\n\r\n/*\r\nexport async function getFileMarkdownByName(fileName: string): Promise<string> {\r\n    const pathToFile = getPathToFile(fileName);\r\n\r\n    if (getIsImage(fileName)) {\r\n        const pathToImage = getPathToImage(fileName, {height: 320, width: 320});\r\n        const {naturalHeight, naturalWidth} = await fetchImage(pathToFile);\r\n\r\n        return `![THE ALT](${pathToImage} \"THE TITLE\" height=\"${naturalHeight}\" width=\"${naturalWidth}\")`;\r\n    }\r\n\r\n    if (getIsAudio(fileName)) {\r\n        const {duration} = await fetchAudio(pathToFile);\r\n\r\n        return `<audio data-duration=\"${duration}\" data-download=\"\" src=\"${pathToFile}\"></audio>`;\r\n    }\r\n\r\n    return `<a href=\"${pathToFile}\" target=\"_blank\" download=\"${fileName}\">${fileName}</a>`;\r\n}\r\n*/\r\n\r\nexport function getAbsentIdList(\r\n    subDocumentIdList: Array<string>,\r\n    savedArticleList: Array<ArticleForValidationType>\r\n): Array<string> {\r\n    if (savedArticleList.length === 0) {\r\n        return [];\r\n    }\r\n\r\n    return subDocumentIdList.filter((id: string): boolean => {\r\n        return !savedArticleList.some((article: ArticleForValidationType): boolean => article.id === id);\r\n    });\r\n}\r\n\r\nexport function handleDeleteArticle(articleId: string): Promise<unknown> {\r\n    return deleteArticle(articleId)\r\n        .then((): unknown => location.reload())\r\n        .catch(console.error);\r\n}\r\n","import {Row, Col} from 'antd';\r\n\r\nimport {Box} from '../box/box';\r\nimport {Markdown} from '../markdown/markdown';\r\n\r\nimport markdownInputWrapperStyle from './markdown-input-wrapper.scss';\r\n\r\ntype MarkdownInputWrapperPropsType = {\r\n    children: JSX.Element;\r\n    mdInput: string;\r\n};\r\n\r\nexport function MarkdownInputWrapper(props: MarkdownInputWrapperPropsType): JSX.Element {\r\n    const {mdInput, children} = props;\r\n\r\n    return (\r\n        <Row className={markdownInputWrapperStyle.markdown_input_wrapper} gutter={[16, 0]}>\r\n            <Col span={12}>{children}</Col>\r\n            <Col span={12}>\r\n                <Box backgroundColor=\"#fff\" height=\"calc(100% - 54px)\" margin={[32, 0, 16]} padding={[8]}>\r\n                    <Markdown articleTitle=\"\" mdInput={mdInput} />\r\n                </Box>\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"markdown_input_wrapper\":\"d6389f\"};","import {Typography, Select, Button} from 'antd';\r\nimport {PlusOutlined} from '@ant-design/icons';\r\nimport {UploadFile} from 'antd/es/upload/interface';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {ArticleFileType, ArticleType} from '../../../../server/article/article-type';\r\nimport {getArticleLinkToViewClient} from '../../../client-component/article/article-helper';\r\nimport {getPathToImage, getPathToFile} from '../../../util/path';\r\n\r\nimport {ArticleForValidationType} from './cms-article-type';\r\nimport {getArticleLinkToEdit, getIsImage} from './cms-article-helper';\r\n\r\nconst {Option} = Select;\r\nconst {Text} = Typography;\r\n\r\nexport function makeFileListItem(fileInfo: ArticleFileType): UploadFile<unknown> {\r\n    const {name: fileInfoName} = fileInfo;\r\n\r\n    const url = getIsImage(fileInfoName)\r\n        ? getPathToImage(fileInfoName, {height: 96, width: 96})\r\n        : getPathToFile(fileInfoName);\r\n\r\n    return {\r\n        name: fileInfoName,\r\n        status: 'done',\r\n        uid: fileInfoName,\r\n        url,\r\n    };\r\n}\r\n\r\nexport function makeSubDocumentOption(articleForValidation: ArticleForValidationType): JSX.Element {\r\n    const {title, id} = articleForValidation;\r\n\r\n    return (\r\n        <Option key={id} title={title} value={id}>\r\n            {title}\r\n        </Option>\r\n    );\r\n}\r\n\r\nexport function getParentList(\r\n    article: ArticleType,\r\n    savedArticleList: Array<ArticleForValidationType>\r\n): Array<ArticleForValidationType> {\r\n    const {id: articleId} = article;\r\n\r\n    return savedArticleList.filter((savedArticle: ArticleForValidationType): boolean =>\r\n        savedArticle.subDocumentIdList.includes(articleId)\r\n    );\r\n}\r\n\r\nexport function renderParentList(\r\n    article: ArticleType,\r\n    savedArticleList: Array<ArticleForValidationType>\r\n): Array<JSX.Element> {\r\n    const parentList: Array<JSX.Element> = getParentList(article, savedArticleList).map(\r\n        (savedArticle: ArticleForValidationType, index: number): JSX.Element => {\r\n            const {id, title, slug} = savedArticle;\r\n\r\n            return (\r\n                <Text key={id}>\r\n                    {index > 0 ? ', ' : null}\r\n                    <Link to={getArticleLinkToViewClient(slug)}>{title}</Link>\r\n                    &nbsp;|&nbsp;\r\n                    <Link to={getArticleLinkToEdit(id)}>{slug}</Link>\r\n                </Text>\r\n            );\r\n        }\r\n    );\r\n\r\n    if (parentList.length > 0) {\r\n        return parentList;\r\n    }\r\n\r\n    return [<Text key=\"no-parents\">no parents</Text>];\r\n}\r\n\r\nexport function UploadButton(): JSX.Element {\r\n    return <Button icon={<PlusOutlined />}>Upload</Button>;\r\n}\r\n","/* global HTMLInputElement */\r\nimport {SyntheticEvent} from 'react';\r\nimport {Typography, Input, Col, Row} from 'antd';\r\nimport {UploadFile} from 'antd/es/upload/interface';\r\nconst {Title} = Typography;\r\n\r\nimport {ArticleFileType} from '../../../../server/article/article-type';\r\nimport {Box} from '../../../layout/box/box';\r\n\r\nimport {getFileMarkdownByFullInfo} from '../../../layout/markdown/markdown-helper';\r\n\r\ntype UploadedFileListItemPropsType = {\r\n    file: UploadFile<unknown>;\r\n    fileInfo: ArticleFileType | void;\r\n    originNode: JSX.Element;\r\n    setFileTitle: (newFileTitle: string) => void;\r\n    // uploadedFileList: Array<UploadFile<unknown>>,\r\n    // actions: { download: () => void; preview: () => void; remove: () => void }\r\n};\r\n\r\nexport function renderUploadedFileListItem(props: UploadedFileListItemPropsType): JSX.Element {\r\n    const {setFileTitle, fileInfo, originNode, file} = props;\r\n\r\n    if (!fileInfo) {\r\n        return (\r\n            <Title level={4} type=\"danger\">\r\n                Can not found file by name: {file.name}\r\n            </Title>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Box height={112}>\r\n            {originNode}\r\n            <Row gutter={8}>\r\n                <Col span={12}>\r\n                    <Input\r\n                        defaultValue={fileInfo.title}\r\n                        onInput={(evt: SyntheticEvent<HTMLInputElement>) => {\r\n                            setFileTitle(evt.currentTarget.value.trim());\r\n                        }}\r\n                        placeholder=\"Title\"\r\n                    />\r\n                </Col>\r\n                <Col span={12}>\r\n                    <Input readOnly value={getFileMarkdownByFullInfo(fileInfo, {alt: ''})} />\r\n                </Col>\r\n            </Row>\r\n        </Box>\r\n    );\r\n}\r\n","/* global File */\r\n\r\nimport {useEffect, useState} from 'react';\r\n// node_modules/antd/lib/upload/index.d.ts\r\n// TODO: set declare const Upload: UploadInterface<any>; TO declare const Upload: UploadInterface<unknown>;\r\n// node_modules/antd/lib/upload/index.d.ts\r\n// WARNING: set declare const Upload: UploadInterface<any>; TO declare const Upload: UploadInterface<unknown>;\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    DatePicker,\r\n    Divider,\r\n    Form,\r\n    Input,\r\n    message,\r\n    Popconfirm,\r\n    Select,\r\n    Typography,\r\n    Upload,\r\n} from 'antd';\r\nimport {FieldData, ValidateErrorEntity} from 'rc-field-form/lib/interface';\r\nimport {UploadChangeParam, UploadFile} from 'antd/es/upload/interface';\r\nimport {Link} from 'react-router-dom';\r\nimport {QuestionCircleOutlined} from '@ant-design/icons';\r\nimport {red} from '@ant-design/colors';\r\nimport dayjs, {Dayjs} from 'dayjs';\r\nimport utc from 'dayjs/plugin/utc';\r\n\r\ndayjs.extend(utc);\r\n\r\nimport {\r\n    ArticleFileType,\r\n    ArticleType,\r\n    ArticleTypeEnum,\r\n    SubDocumentListViewTypeEnum,\r\n} from '../../../../server/article/article-type';\r\nimport {validateArticle} from '../../../../server/article/article-validation';\r\nimport {\r\n    arrayToStringByComma,\r\n    humanNormalizeString,\r\n    makeTagsPreview,\r\n    stringToArrayByComma,\r\n    textToSlug,\r\n} from '../../../util/human';\r\nimport {useMakeExecutableState} from '../../../util/function';\r\nimport {PaginationResultType} from '../../../../server/data-base/data-base-type';\r\nimport {getArticleListPaginationPick} from '../../../service/article/article-api';\r\nimport {MarkdownInputWrapper} from '../../../layout/markdown-input-wrapper/markdown-input-wrapper';\r\nimport {IsRender} from '../../../layout/is-render/is-render';\r\nimport {rootArticleId} from '../../../../server/article/article-const';\r\nimport {getArticleLinkToViewClient} from '../../../client-component/article/article-helper';\r\nimport {Box} from '../../../layout/box/box';\r\nimport {HotKeyModifierEnum, useHotKey} from '../../../util/hot-key';\r\nimport {makeDefaultArticleFile} from '../../../../server/article/article-helper';\r\nimport {Spinner} from '../../../layout/spinner/spinner';\r\n\r\nimport {\r\n    getAbsentIdList,\r\n    getArticleLinkToEdit,\r\n    getIsImage,\r\n    handleDeleteArticle,\r\n    makeHtmlValidator,\r\n    makeSlugValidator,\r\n    uploadFile,\r\n} from './cms-article-helper';\r\nimport {\r\n    getParentList,\r\n    makeFileListItem,\r\n    makeSubDocumentOption,\r\n    renderParentList,\r\n    UploadButton,\r\n} from './cms-article-layout';\r\nimport {\r\n    CmsArticleModeEnum,\r\n    fileSizeLimit,\r\n    imageAccept,\r\n    imageFileSizeLimit,\r\n    keyForValidationList,\r\n    noDateUTC,\r\n} from './cms-article-const';\r\nimport {ArticleForValidationType} from './cms-article-type';\r\nimport {renderUploadedFileListItem} from './render-uploaded-file-list-item';\r\n\r\nconst {Text, Title} = Typography;\r\nconst {Option} = Select;\r\nconst {TextArea} = Input;\r\n\r\ntype CmsArticlePropsType = {\r\n    article: ArticleType;\r\n    mode: CmsArticleModeEnum;\r\n    onFinish: (article: ArticleType) => void;\r\n};\r\n\r\n// eslint-disable-next-line complexity, max-statements\r\nexport function CmsArticle(props: CmsArticlePropsType): JSX.Element {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\r\n    const {article, onFinish, mode} = props;\r\n    const {\r\n        articleType,\r\n        content,\r\n        createdDate,\r\n        description,\r\n        descriptionShort,\r\n        fileList: defaultFileList,\r\n        hasMetaRobotsNoFollowSeo, // Add/combine <meta name=\"robots\" content=\"nofollow\"/>\r\n        hasMetaRobotsNoIndexSeo, // Add/combine <meta name=\"robots\" content=\"noindex\"/> and add X-Robots-Tag: noindex\r\n        id,\r\n        isActive, // actually temporary \"removed\"\r\n        isInSiteMapXmlSeo, // has sitemap.xml link to article or not\r\n        metaDescriptionSeo, // tag <meta name=\"description\" content=\".....\" />\r\n        metaKeyWordsSeo, // tag <meta name=\"keywords\" content=\".....\" />\r\n        metaSeo, // actually any html code\r\n        publishDate: defaultPublishDate,\r\n        slug,\r\n        staffArtistList,\r\n        staffAuthorList,\r\n        staffCompositorList,\r\n        staffDirectorList,\r\n        staffIllustratorList,\r\n        staffReaderList,\r\n        subDocumentIdList,\r\n        subDocumentListViewType,\r\n        tagList,\r\n        tagTitleSeo, // tag <title>....</title>\r\n        title,\r\n        titleImage: defaultTitleImage,\r\n        updatedDate,\r\n    } = article;\r\n\r\n    const [form] = Form.useForm<ArticleType>();\r\n    const [fileList, setFileList] = useState<Array<ArticleFileType>>([...defaultFileList]);\r\n    const [titleImage, setTitleImage] = useState<ArticleFileType>(defaultTitleImage);\r\n    const [publishDate, setPublishDate] = useState<string>(defaultPublishDate || new Date().toISOString());\r\n    const [recommendedSlug, setRecommendedSlug] = useState<string>(textToSlug(title));\r\n    const [currentArticleState, setCurrentArticleState] = useState<ArticleType>(article);\r\n    const [isFileLoading, setIsFileLoading] = useState<boolean>(false);\r\n\r\n    useHotKey([HotKeyModifierEnum.ctrl], 's', form.submit);\r\n\r\n    const {execute: executeArticleListPaginationPick} = useMakeExecutableState<\r\n        Parameters<typeof getArticleListPaginationPick<keyof ArticleForValidationType>>,\r\n        PaginationResultType<ArticleForValidationType>\r\n    >(getArticleListPaginationPick);\r\n\r\n    const [savedArticleList, setSavedArticleList] = useState<Array<ArticleForValidationType>>([]);\r\n\r\n    useEffect(() => {\r\n        executeArticleListPaginationPick({}, {pageIndex: 0, pageSize: 0, sort: {title: 1}}, keyForValidationList)\r\n            .then((data: PaginationResultType<ArticleForValidationType>) => setSavedArticleList(data.list))\r\n            .catch((error: Error) => {\r\n                console.log(error);\r\n                message.error('Can not fetch article list.');\r\n            });\r\n    }, [executeArticleListPaginationPick]);\r\n\r\n    function onFinishForm(rawValues: ArticleType) {\r\n        const values: ArticleType = {\r\n            ...rawValues,\r\n            fileList,\r\n            publishDate,\r\n            staffArtistList: stringToArrayByComma(rawValues.staffArtistList),\r\n            staffAuthorList: stringToArrayByComma(rawValues.staffAuthorList),\r\n            staffCompositorList: stringToArrayByComma(rawValues.staffCompositorList),\r\n            staffDirectorList: stringToArrayByComma(rawValues.staffDirectorList),\r\n            staffIllustratorList: stringToArrayByComma(rawValues.staffIllustratorList),\r\n            staffReaderList: stringToArrayByComma(rawValues.staffReaderList),\r\n            tagList: stringToArrayByComma(rawValues.tagList),\r\n            title: humanNormalizeString(rawValues.title),\r\n            titleImage,\r\n        };\r\n        // validate form\r\n        const [isValidArticle, validateFunction] = validateArticle(values);\r\n\r\n        console.info('validateFunction.errors');\r\n        console.info(validateFunction.errors);\r\n        console.log('onFinishForm, is valid -', isValidArticle);\r\n        console.log('---> onFinishForm, values -', values);\r\n        console.log('---> onFinishForm, fileList -', fileList);\r\n\r\n        if (isValidArticle) {\r\n            onFinish(values);\r\n            return;\r\n        }\r\n\r\n        message.error(JSON.stringify(validateFunction.errors));\r\n    }\r\n\r\n    function onFinishFailedForm(errorInfo: ValidateErrorEntity<ArticleType>) {\r\n        message.error(JSON.stringify(errorInfo.errorFields));\r\n        console.log('onFinishFailedForm:', errorInfo);\r\n        console.log('onFinishFailedForm:', article);\r\n    }\r\n\r\n    function onValuesChangeForm(changedValues: unknown, values: ArticleType) {\r\n        setRecommendedSlug(textToSlug(values.title));\r\n        setCurrentArticleState(values);\r\n        console.log('onValuesChangeForm:', changedValues, values);\r\n        console.log('onValuesChangeForm:', article);\r\n    }\r\n\r\n    function onFieldsChangeForm(changedFields: Array<FieldData>, allFields: Array<FieldData>) {\r\n        console.log('onFieldsChangeForm:', changedFields, allFields);\r\n        console.log('onFieldsChangeForm:', article);\r\n    }\r\n\r\n    function handleChangeFileList(info: UploadChangeParam<UploadFile<unknown>>) {\r\n        const {file} = info;\r\n\r\n        if (file.status === 'removed') {\r\n            setFileList((currentFileList: Array<ArticleFileType>): Array<ArticleFileType> => {\r\n                return currentFileList.filter((fileInfo: ArticleFileType): boolean => fileInfo.name !== file.name);\r\n            });\r\n        }\r\n\r\n        console.log('handleChangeFileList:', info);\r\n        console.log('handleChangeFileList:', article);\r\n    }\r\n\r\n    function handleChangeTitleImage(info: UploadChangeParam<UploadFile<unknown>>) {\r\n        const {file} = info;\r\n\r\n        if (file.status === 'removed') {\r\n            setTitleImage(makeDefaultArticleFile());\r\n        }\r\n\r\n        console.log('handleChangeTitleImage:', info);\r\n        console.log('handleChangeTitleImage:', article);\r\n    }\r\n\r\n    const absentIdList = getAbsentIdList(subDocumentIdList, savedArticleList);\r\n    const parentList = getParentList(article, savedArticleList);\r\n    const hasParent = parentList.length > 0;\r\n    const isDisableToDelete = hasParent || id === rootArticleId;\r\n\r\n    return (\r\n        <Form<ArticleType>\r\n            autoComplete=\"off\"\r\n            form={form}\r\n            initialValues={{remember: true}}\r\n            layout=\"vertical\"\r\n            name=\"article\"\r\n            onFieldsChange={onFieldsChangeForm}\r\n            onFinish={onFinishForm}\r\n            onFinishFailed={onFinishFailedForm}\r\n            onValuesChange={onValuesChangeForm}\r\n            scrollToFirstError\r\n        >\r\n            <Spinner isShow={isFileLoading} position=\"fixed\" />\r\n            <IsRender isRender={absentIdList.length > 0}>\r\n                <Title level={4} type=\"danger\">\r\n                    Document has missing children, children Id:&nbsp;{absentIdList.join(', ')}\r\n                </Title>\r\n            </IsRender>\r\n\r\n            <Box padding={[8, 0]}>\r\n                <Text>\r\n                    Article:&nbsp;\r\n                    <Link to={getArticleLinkToViewClient(slug)}>{title}</Link>\r\n                    &nbsp;|&nbsp;\r\n                    <Link to={getArticleLinkToEdit(id)}>{slug}</Link>\r\n                </Text>\r\n            </Box>\r\n\r\n            <Box padding={[8, 0, 16]}>\r\n                <Text>Parents:&nbsp;{renderParentList(article, savedArticleList)}</Text>\r\n            </Box>\r\n\r\n            <Form.Item hidden initialValue={id} label={`Article id: ${id}`} name=\"id\">\r\n                <Input disabled />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={`Title image (to 16MB): ${titleImage.name}`}>\r\n                <Upload<unknown>\r\n                    accept={imageAccept}\r\n                    action={async (file: File): Promise<string> => {\r\n                        try {\r\n                            setIsFileLoading(true);\r\n\r\n                            const uploadedFileInfo: ArticleFileType = await uploadFile(file, imageFileSizeLimit);\r\n\r\n                            setTitleImage(uploadedFileInfo);\r\n                        } catch (error: unknown) {\r\n                            const errorMessage = error instanceof Error ? error.message : 'Too big file';\r\n\r\n                            message.error(errorMessage);\r\n                        } finally {\r\n                            setIsFileLoading(false);\r\n                        }\r\n\r\n                        // just prevent extra request to our server\r\n                        return 'https://dev.null/dev/null';\r\n                    }}\r\n                    fileList={titleImage.size > 0 ? [titleImage].map(makeFileListItem) : []}\r\n                    itemRender={(originNode: JSX.Element, file: UploadFile<unknown>): JSX.Element => {\r\n                        return renderUploadedFileListItem({\r\n                            file,\r\n                            fileInfo: titleImage,\r\n                            originNode,\r\n                            setFileTitle: (newFileTitle: string) => {\r\n                                setTitleImage({\r\n                                    ...titleImage,\r\n                                    title: newFileTitle,\r\n                                });\r\n                            },\r\n                        });\r\n                    }}\r\n                    listType=\"picture\"\r\n                    maxCount={1}\r\n                    onChange={handleChangeTitleImage}\r\n                >\r\n                    {titleImage.size > 0 ? null : <UploadButton />}\r\n                </Upload>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={title}\r\n                label=\"Title:\"\r\n                name=\"title\"\r\n                rules={[{message: 'Required!', required: true}]}\r\n            >\r\n                <Input placeholder=\"Title\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={slug}\r\n                label={`Slug, avoid spec symbols, slug from title: ${recommendedSlug}`}\r\n                name=\"slug\"\r\n                normalize={textToSlug}\r\n                rules={makeSlugValidator({id, mode, savedArticleList})}\r\n            >\r\n                <Input disabled={savedArticleList.length === 0} placeholder=\"slug-is-here\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item initialValue={articleType} label=\"Article type:\" name=\"articleType\">\r\n                <Select<ArticleTypeEnum>>\r\n                    <Option value={ArticleTypeEnum.article}>Article</Option>\r\n                    <Option value={ArticleTypeEnum.container}>Container</Option>\r\n                    <Option value={ArticleTypeEnum.audioList}>Audio List</Option>\r\n                    <Option value={ArticleTypeEnum.audioSingle}>Audio Single</Option>\r\n                    <Option value={ArticleTypeEnum.audioChildrenList}>Audio Children List</Option>\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(tagList)}\r\n                label={`Tag List, use comma \",\" to divide: ${makeTagsPreview(currentArticleState.tagList)}`}\r\n                name=\"tagList\"\r\n            >\r\n                <Input placeholder=\"Tag1, Tag2, Tag3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={subDocumentListViewType}\r\n                label=\"Sub Document List View Type:\"\r\n                name=\"subDocumentListViewType\"\r\n            >\r\n                <Select<SubDocumentListViewTypeEnum>>\r\n                    <Option value={SubDocumentListViewTypeEnum.header}>Header</Option>\r\n                    <Option value={SubDocumentListViewTypeEnum.headerImage}>Header-Image</Option>\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <Form.Item initialValue={subDocumentIdList} label=\"Sub Document List:\" name=\"subDocumentIdList\">\r\n                <Select<Array<string>>\r\n                    disabled={savedArticleList.length === 0}\r\n                    filterOption\r\n                    loading={savedArticleList.length === 0}\r\n                    mode=\"multiple\"\r\n                    optionFilterProp=\"title\"\r\n                    placeholder=\"Sub Document Id...\"\r\n                >\r\n                    {savedArticleList.map(makeSubDocumentOption)}\r\n                </Select>\r\n            </Form.Item>\r\n\r\n            <MarkdownInputWrapper mdInput={currentArticleState.content}>\r\n                <Form.Item initialValue={content} label=\"Content, use markdown:\" name=\"content\">\r\n                    <TextArea placeholder=\"# Markdown...\" rows={10} />\r\n                </Form.Item>\r\n            </MarkdownInputWrapper>\r\n\r\n            <MarkdownInputWrapper mdInput={currentArticleState.description}>\r\n                <Form.Item initialValue={description} label=\"Description, use markdown:\" name=\"description\">\r\n                    <TextArea placeholder=\"Some description is here...\" rows={3} />\r\n                </Form.Item>\r\n            </MarkdownInputWrapper>\r\n\r\n            <Form.Item\r\n                initialValue={descriptionShort}\r\n                label=\"Short description, plain text only, used for Open Graph:\"\r\n                name=\"descriptionShort\"\r\n            >\r\n                <TextArea placeholder=\"Some short description is here...\" rows={3} />\r\n            </Form.Item>\r\n\r\n            <Form.Item label={`Files (image to 16MB, other to 75MB): ${fileList.length}`}>\r\n                <Upload<unknown>\r\n                    // accept={fileAccept}\r\n                    action={async (file: File): Promise<string> => {\r\n                        try {\r\n                            setIsFileLoading(true);\r\n\r\n                            const sizeLimit = getIsImage(file.name) ? imageFileSizeLimit : fileSizeLimit;\r\n                            const uploadedFileInfo: ArticleFileType = await uploadFile(file, sizeLimit);\r\n\r\n                            setFileList((currentFileList: Array<ArticleFileType>): Array<ArticleFileType> => {\r\n                                return [...currentFileList, uploadedFileInfo];\r\n                            });\r\n                        } catch (error: unknown) {\r\n                            const errorMessage = error instanceof Error ? error.message : 'Too big file';\r\n\r\n                            message.error(errorMessage);\r\n                        } finally {\r\n                            setIsFileLoading(false);\r\n                        }\r\n\r\n                        // just prevent extra request to our server\r\n                        return 'https://dev.null/dev/null';\r\n                    }}\r\n                    fileList={fileList.map(makeFileListItem)}\r\n                    // itemRender={renderUploadedFileListItem}\r\n                    itemRender={(originNode: JSX.Element, file: UploadFile<unknown>): JSX.Element => {\r\n                        const fileInfo = fileList.find(\r\n                            (fileInfoIList: ArticleFileType): boolean => fileInfoIList.name === file.name\r\n                        );\r\n\r\n                        return renderUploadedFileListItem({\r\n                            file,\r\n                            fileInfo,\r\n                            originNode,\r\n                            setFileTitle: (newFileTitle: string) => {\r\n                                if (fileInfo) {\r\n                                    fileInfo.title = newFileTitle;\r\n                                    setFileList([...fileList]);\r\n                                }\r\n                            },\r\n                        });\r\n                    }}\r\n                    listType=\"picture\"\r\n                    onChange={handleChangeFileList}\r\n                >\r\n                    <UploadButton />\r\n                </Upload>\r\n            </Form.Item>\r\n\r\n            <Form.Item initialValue={dayjs.utc(publishDate)} label=\"Publish date UTC-0:\" name=\"publishDate\">\r\n                <DatePicker onOk={(date: Dayjs): void => setPublishDate(date.toISOString())} showTime />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                // set on server\r\n                initialValue={createdDate || noDateUTC}\r\n                label=\"Created date UTC-0:\"\r\n                name=\"createdDate\"\r\n            >\r\n                <Input disabled />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                // set on server\r\n                initialValue={updatedDate || noDateUTC}\r\n                label=\"Updated date UTC-0:\"\r\n                name=\"updatedDate\"\r\n            >\r\n                <Input disabled />\r\n            </Form.Item>\r\n\r\n            <Divider orientation=\"center\">SEO</Divider>\r\n\r\n            <Form.Item initialValue={tagTitleSeo} label=\"Meta Title, tag <title>...</title>:\" name=\"tagTitleSeo\">\r\n                <Input placeholder=\"Title...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={hasMetaRobotsNoFollowSeo}\r\n                label=\"Has Meta Robots No Follow:\"\r\n                name=\"hasMetaRobotsNoFollowSeo\"\r\n                valuePropName=\"checked\"\r\n            >\r\n                <Checkbox>Add/combine &lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot; /&gt;</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={hasMetaRobotsNoIndexSeo}\r\n                label=\"Has Meta Robots No Index:\"\r\n                name=\"hasMetaRobotsNoIndexSeo\"\r\n                valuePropName=\"checked\"\r\n            >\r\n                <Checkbox>\r\n                    Add/combine &lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;/&gt; and add X-Robots-Tag:\r\n                    noindex\r\n                </Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item initialValue={isActive} label=\"Is Active:\" name=\"isActive\" valuePropName=\"checked\">\r\n                <Checkbox>Uncheck to temporary &quot;remove&quot; (also remove from sitemap.xml)</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={isInSiteMapXmlSeo}\r\n                label=\"Is In Site Map Xml:\"\r\n                name=\"isInSiteMapXmlSeo\"\r\n                valuePropName=\"checked\"\r\n            >\r\n                <Checkbox>Does sitemap.xml has link to article or not</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={metaDescriptionSeo}\r\n                label={'Meta Description, tag <meta name=\"description\" content=\"...\" />:'}\r\n                name=\"metaDescriptionSeo\"\r\n            >\r\n                <Input placeholder=\"Description...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={metaKeyWordsSeo}\r\n                label={'Meta KeyWords, tag <meta name=\"keywords\" content=\"...\" />:'}\r\n                name=\"metaKeyWordsSeo\"\r\n            >\r\n                <Input placeholder=\"KeyWords...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={metaSeo}\r\n                label=\"Meta, actually any valid html code:\"\r\n                name=\"metaSeo\"\r\n                rules={makeHtmlValidator()}\r\n            >\r\n                <TextArea placeholder=\"Additional meta tags...\" rows={3} />\r\n            </Form.Item>\r\n\r\n            <Divider orientation=\"center\">Staff</Divider>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(staffArtistList)}\r\n                label={`Staff Artists, use comma \",\" to divide: ${makeTagsPreview(\r\n                    currentArticleState.staffArtistList\r\n                )}`}\r\n                name=\"staffArtistList\"\r\n            >\r\n                <Input placeholder=\"Name1, Name2, Name3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(staffAuthorList)}\r\n                label={`Staff Authors, use comma \",\" to divide: ${makeTagsPreview(\r\n                    currentArticleState.staffAuthorList\r\n                )}`}\r\n                name=\"staffAuthorList\"\r\n            >\r\n                <Input placeholder=\"Name1, Name2, Name3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(staffCompositorList)}\r\n                label={`Staff Compositors, use comma \",\" to divide: ${makeTagsPreview(\r\n                    currentArticleState.staffCompositorList\r\n                )}`}\r\n                name=\"staffCompositorList\"\r\n            >\r\n                <Input placeholder=\"Name1, Name2, Name3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(staffDirectorList)}\r\n                label={`Staff Directors, use comma \",\" to divide: ${makeTagsPreview(\r\n                    currentArticleState.staffDirectorList\r\n                )}`}\r\n                name=\"staffDirectorList\"\r\n            >\r\n                <Input placeholder=\"Name1, Name2, Name3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(staffIllustratorList)}\r\n                label={`Staff Illustrators, use comma \",\" to divide: ${makeTagsPreview(\r\n                    currentArticleState.staffIllustratorList\r\n                )}`}\r\n                name=\"staffIllustratorList\"\r\n            >\r\n                <Input placeholder=\"Name1, Name2, Name3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                initialValue={arrayToStringByComma(staffReaderList)}\r\n                label={`Staff Readers, use comma \",\" to divide: ${makeTagsPreview(\r\n                    currentArticleState.staffReaderList\r\n                )}`}\r\n                name=\"staffReaderList\"\r\n            >\r\n                <Input placeholder=\"Name1, Name2, Name3...\" />\r\n            </Form.Item>\r\n\r\n            <Form.Item>\r\n                <Button htmlType=\"submit\" type=\"primary\">\r\n                    Submit (ctrl+S)\r\n                </Button>\r\n                <IsRender isRender={mode === CmsArticleModeEnum.edit}>\r\n                    &nbsp;\r\n                    <Popconfirm\r\n                        cancelText=\"No\"\r\n                        disabled={isDisableToDelete}\r\n                        icon={<QuestionCircleOutlined style={{color: red.primary}} />}\r\n                        okText=\"Delete\"\r\n                        onConfirm={() => handleDeleteArticle(id)}\r\n                        title=\"Are you sure to delete the article？\"\r\n                    >\r\n                        <Button disabled={isDisableToDelete} htmlType=\"button\" type=\"default\">\r\n                            {isDisableToDelete ? 'Can NOT delete, article has parent' : 'Delete'}\r\n                        </Button>\r\n                    </Popconfirm>\r\n                </IsRender>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n","import {ReactNode} from 'react';\r\nimport {Layout, Menu} from 'antd';\r\nimport {Link, useLocation} from 'react-router-dom';\r\n\r\nimport 'antd/dist/reset.css';\r\n\r\nimport {Box} from '../../../../layout/box/box';\r\nimport {appRoute} from '../../../../component/app/app-route';\r\n\r\nconst {Content} = Layout;\r\n\r\ntype CmsPagePropsType = {\r\n    children: ReactNode;\r\n};\r\n\r\nexport function CmsPage(props: CmsPagePropsType): JSX.Element {\r\n    const {children} = props;\r\n    const routerLocation = useLocation();\r\n\r\n    return (\r\n        <Layout>\r\n            <Box padding={16}>\r\n                <Menu\r\n                    defaultSelectedKeys={[routerLocation.pathname]}\r\n                    items={[\r\n                        {\r\n                            key: appRoute.articleList.path,\r\n                            label: <Link to={appRoute.articleList.path}>List</Link>,\r\n                        },\r\n                        {\r\n                            key: appRoute.articleCreate.path,\r\n                            label: <Link to={appRoute.articleCreate.path}>Create</Link>,\r\n                        },\r\n                        {\r\n                            key: appRoute.articleTree.path,\r\n                            label: <Link to={appRoute.articleTree.path}>Tree</Link>,\r\n                        },\r\n                    ]}\r\n                    mode=\"horizontal\"\r\n                />\r\n            </Box>\r\n\r\n            <Box padding={16}>\r\n                <Content>{children}</Content>\r\n            </Box>\r\n\r\n            {/* <Footer>Footer is here</Footer> */}\r\n        </Layout>\r\n    );\r\n}\r\n"],"names":["makeCssArray","value","Array","isArray","length","console","error","Box","props","tagName","TagName","children","margin","padding","width","height","boxSizing","backgroundColor","display","marginTop","marginRight","marginBottom","marginLeft","paddingTop","paddingRight","paddingBottom","paddingLeft","map","style","CmsArticleModeEnum","keyForValidationList","noDateUTC","imageAccept","imageFileSizeLimit","fileSizeLimit","async","uploadFile","file","fileSizeLimitBytes","formData","FormData","size","Error","append","fileInfo","body","credentials","method","pathToFile","name","type","naturalHeight","naturalWidth","pathToImage","image","Image","Promise","resolve","reject","addEventListener","src","fetchImage","duration","pathToAudio","audio","Audio","preload","fetchAudio","videoWidth","videoHeight","pathToVideo","video","document","createElement","fetchVideo","makeSlugValidator","data","id","mode","savedArticleList","message","required","validator","rule","savedArticleBySlugList","filter","savedArticle","slug","savedArticleBySlugListLength","isSavedArticle","savedArticleForValidation","makeHtmlValidator","wrapper","innerHTML","trim","getArticleLinkToEdit","articleId","getIsImage","fileName","fileExtension","includes","split","pop","toLowerCase","getFileExtension","getAbsentIdList","subDocumentIdList","some","article","handleDeleteArticle","then","location","reload","catch","MarkdownInputWrapper","mdInput","className","gutter","span","articleTitle","Option","Text","makeFileListItem","fileInfoName","status","uid","url","makeSubDocumentOption","articleForValidation","title","getParentList","renderParentList","parentList","index","Link","to","UploadButton","icon","PlusOutlined","Title","renderUploadedFileListItem","setFileTitle","originNode","defaultValue","onInput","evt","currentTarget","placeholder","readOnly","alt","level","TextArea","CmsArticle","onFinish","articleType","content","createdDate","description","descriptionShort","fileList","defaultFileList","hasMetaRobotsNoFollowSeo","hasMetaRobotsNoIndexSeo","isActive","isInSiteMapXmlSeo","metaDescriptionSeo","metaKeyWordsSeo","metaSeo","publishDate","defaultPublishDate","staffArtistList","staffAuthorList","staffCompositorList","staffDirectorList","staffIllustratorList","staffReaderList","subDocumentListViewType","tagList","tagTitleSeo","titleImage","defaultTitleImage","updatedDate","form","setFileList","useState","setTitleImage","setPublishDate","Date","toISOString","recommendedSlug","setRecommendedSlug","currentArticleState","setCurrentArticleState","isFileLoading","setIsFileLoading","submit","execute","executeArticleListPaginationPick","setSavedArticleList","useEffect","pageIndex","pageSize","sort","list","absentIdList","isDisableToDelete","autoComplete","initialValues","remember","layout","onFieldsChange","changedFields","allFields","rawValues","values","human","isValidArticle","validateFunction","info","errors","JSON","stringify","onFinishFailed","errorInfo","errorFields","onValuesChange","changedValues","scrollToFirstError","isShow","position","isRender","join","hidden","initialValue","label","disabled","accept","action","uploadedFileInfo","errorMessage","itemRender","newFileTitle","listType","maxCount","onChange","rules","normalize","filterOption","loading","optionFilterProp","rows","sizeLimit","currentFileList","find","fileInfoIList","onOk","date","showTime","orientation","valuePropName","htmlType","cancelText","QuestionCircleOutlined","color","okText","onConfirm","Content","CmsPage","routerLocation","defaultSelectedKeys","pathname","items","key"],"sourceRoot":""}
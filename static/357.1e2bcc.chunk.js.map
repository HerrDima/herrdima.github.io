{"version":3,"file":"357.1e2bcc.chunk.js","mappings":"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","sources":["webpack://min-svenska/./www/layout/box/box-helper.ts","webpack://min-svenska/./www/layout/box/box.tsx","webpack://min-svenska/./www/page/cms/cms-article/cms-article-const.ts","webpack://min-svenska/./www/page/cms/cms-article/cms-article-helper.tsx","webpack://min-svenska/./www/layout/markdown-input-wrapper/markdown-input-wrapper.scss?1209","webpack://min-svenska/./www/layout/markdown-input-wrapper/markdown-input-wrapper.tsx","webpack://min-svenska/./www/page/cms/cms-article/cms-article-layout.tsx","webpack://min-svenska/./www/page/cms/cms-article/render-uploaded-file-list-item.tsx","webpack://min-svenska/./www/page/cms/cms-article/cms-article.tsx","webpack://min-svenska/./www/page/cms/layout/cms-page/cms-page.tsx"],"sourcesContent":["// eslint-disable-next-line complexity\nexport function makeCssArray(value?: Array<number> | number): [number, number, number, number] {\n    if (typeof value === 'number') {\n        return [value, value, value, value];\n    }\n\n    if (!Array.isArray(value)) {\n        return [0, 0, 0, 0];\n    }\n\n    const arrayLength = value.length;\n\n    switch (arrayLength) {\n        case 0: {\n            return [0, 0, 0, 0];\n        }\n        case 1: {\n            return [value[0], value[0], value[0], value[0]];\n        }\n        case 2: {\n            return [value[0], value[1], value[0], value[1]];\n        }\n        case 3: {\n            return [value[0], value[1], value[2], value[1]];\n        }\n        case 4: {\n            return [value[0], value[1], value[2], value[3]];\n        }\n        default: {\n            console.error('makeCssArray: too big array');\n            return [value[0], value[1], value[2], value[3]];\n        }\n    }\n}\n","import {ReactNode, ElementType, CSSProperties} from 'react';\n\nimport {makeCssArray} from './box-helper';\n\ntype BoxPropsType = {\n    backgroundColor?: string;\n    boxSizing?: 'border-box' | 'content-box' | 'initial';\n    children?: ReactNode;\n    display?: 'block' | 'flex' | 'inline';\n    height?: number | string;\n    margin?: Array<number> | number;\n    padding?: Array<number> | number;\n    tagName?: ElementType;\n    width?: number | string;\n};\n\nexport function Box(props: BoxPropsType): JSX.Element {\n    const {\n        tagName: TagName = 'div',\n        children,\n        margin,\n        padding,\n        width,\n        height,\n        boxSizing,\n        backgroundColor,\n        display,\n    } = props;\n\n    const [marginTop, marginRight, marginBottom, marginLeft, paddingTop, paddingRight, paddingBottom, paddingLeft] = [\n        ...makeCssArray(margin),\n        ...makeCssArray(padding),\n    ].map((value: number): string => `${value}px`);\n\n    const style: CSSProperties = {\n        backgroundColor,\n        boxSizing,\n        display,\n        height,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        marginTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight,\n        paddingTop,\n        width,\n    };\n\n    return <TagName style={style}>{children}</TagName>;\n}\n","import {KeyForValidationListType} from './cms-article-type';\n\nexport const enum CmsArticleModeEnum {\n    create = 'create',\n    edit = 'edit',\n}\n\nexport const keyForValidationList: KeyForValidationListType = ['id', 'slug', 'subDocumentIdList', 'title'];\nexport const noDateUTC = '0000-00-00T00:00:00.000Z';\n\nexport const imageAccept = 'image/png, image/jpeg, image/gif, image/webp';\nexport const fileAccept = `${imageAccept}, audio/mp3, audio/wav`;\nexport const imageFileSizeLimit = 16e6;\nexport const fileSizeLimit = 75e6;\n","/* global document, Image, HTMLImageElement, Audio, HTMLAudioElement, HTMLVideoElement, File, FormData, location */\nimport {Rule, RuleObject} from 'rc-field-form/lib/interface';\n\nimport {generatePath} from '../../../util/url';\nimport {textToSlug} from '../../../util/human';\nimport {appRoute} from '../../../component/app/app-route';\nimport {PromiseResolveType} from '../../../util/promise';\nimport {apiUrl} from '../../../../server/const';\nimport {FetchMethodEnum, fetchX} from '../../../util/fetch';\nimport {deleteArticle} from '../../../service/article/article-api';\nimport {ArticleFileType, ArticleFileTypeEnum} from '../../../../server/article/article-type';\nimport {makeArticleFileSchema} from '../../../../server/article/article-validation';\nimport {NeverError} from '../../../util/error';\n\nimport {getPathToFile} from '../../../util/path';\n\nimport {ArticleForValidationType, MakeSlugValidatorArgumentType} from './cms-article-type';\nimport {CmsArticleModeEnum} from './cms-article-const';\n\nexport function fetchImage(pathToImage: string): Promise<HTMLImageElement> {\n    const image = new Image();\n\n    return new Promise<HTMLImageElement>(\n        (resolve: PromiseResolveType<HTMLImageElement>, reject: PromiseResolveType<unknown>) => {\n            image.addEventListener('load', () => resolve(image), false);\n\n            image.addEventListener('error', reject, false);\n\n            image.src = pathToImage;\n        }\n    );\n}\n\nexport function fetchAudio(pathToAudio: string): Promise<HTMLAudioElement> {\n    const audio = new Audio();\n\n    return new Promise<HTMLAudioElement>(\n        (resolve: PromiseResolveType<HTMLAudioElement>, reject: PromiseResolveType<unknown>) => {\n            audio.addEventListener('loadedmetadata', () => resolve(audio), false);\n\n            audio.addEventListener('error', reject, false);\n\n            audio.preload = 'metadata';\n            audio.src = pathToAudio;\n        }\n    );\n}\n\nexport function fetchVideo(pathToVideo: string): Promise<HTMLVideoElement> {\n    const video: HTMLVideoElement = document.createElement('video');\n\n    return new Promise<HTMLVideoElement>(\n        (resolve: PromiseResolveType<HTMLVideoElement>, reject: PromiseResolveType<unknown>) => {\n            video.addEventListener('loadedmetadata', () => resolve(video), false);\n\n            video.addEventListener('error', reject, false);\n\n            video.preload = 'metadata';\n            video.src = pathToVideo;\n        }\n    );\n}\n\n// eslint-disable-next-line complexity\nexport async function uploadFile(file: File, fileSizeLimitBytes: number): Promise<ArticleFileType> {\n    const formData = new FormData();\n\n    if (file.size >= fileSizeLimitBytes) {\n        throw new Error(`Too big file, limit ${fileSizeLimitBytes / 1e6}MB`);\n    }\n\n    formData.append('file', file);\n\n    const fileInfo: ArticleFileType = await fetchX<ArticleFileType>(apiUrl.adminFileUpload, makeArticleFileSchema(), {\n        body: formData,\n        credentials: 'include',\n        method: FetchMethodEnum.post,\n    });\n\n    const pathToFile = getPathToFile(fileInfo.name);\n\n    switch (fileInfo.type) {\n        case ArticleFileTypeEnum.image: {\n            const {naturalHeight, naturalWidth} = await fetchImage(pathToFile);\n\n            return {\n                ...fileInfo,\n                height: naturalHeight,\n                width: naturalWidth,\n            };\n        }\n        case ArticleFileTypeEnum.audio: {\n            const {duration} = await fetchAudio(pathToFile);\n\n            return {\n                ...fileInfo,\n                duration,\n            };\n        }\n\n        case ArticleFileTypeEnum.video: {\n            const {duration, videoWidth, videoHeight} = await fetchVideo(pathToFile);\n\n            return {\n                ...fileInfo,\n                duration,\n                height: videoHeight,\n                width: videoWidth,\n            };\n        }\n\n        case ArticleFileTypeEnum.unknown: {\n            return fileInfo;\n        }\n\n        default: {\n            throw new NeverError(fileInfo.type);\n        }\n    }\n\n    // eslint-disable-next-line no-unreachable\n    return fileInfo;\n}\n\nexport function makeSlugValidator(data: MakeSlugValidatorArgumentType): Array<Rule> {\n    const {id, mode, savedArticleList} = data;\n\n    return [\n        {\n            message: 'Required!',\n            required: true,\n        },\n        {\n            message: 'Please-enter-slug-properly.',\n            validator: async (rule: RuleObject, value: string) => {\n                if (textToSlug(value) !== value) {\n                    throw new Error('Slug is not formatted.');\n                }\n            },\n        },\n        {\n            message: 'Please enter another slug. This slug already exists.',\n            // eslint-disable-next-line complexity\n            validator: async (rule: RuleObject, value: string) => {\n                const savedArticleBySlugList: Array<ArticleForValidationType> = savedArticleList.filter(\n                    (savedArticle: ArticleForValidationType): boolean => {\n                        return savedArticle.slug === value;\n                    }\n                );\n\n                const savedArticleBySlugListLength = savedArticleBySlugList.length;\n\n                if (savedArticleBySlugListLength === 0) {\n                    return;\n                }\n\n                if (savedArticleBySlugListLength >= 2) {\n                    throw new Error('There are should be only one no non articles');\n                }\n\n                const isSavedArticle: boolean = savedArticleBySlugListLength > 0;\n\n                if (mode === CmsArticleModeEnum.create && isSavedArticle) {\n                    throw new Error('Use unique slug.');\n                }\n\n                const [savedArticleForValidation] = savedArticleBySlugList;\n\n                if (\n                    mode === CmsArticleModeEnum.edit &&\n                    savedArticleForValidation.slug === value &&\n                    savedArticleForValidation.id !== id\n                ) {\n                    throw new Error('Article with your slug already exists');\n                }\n            },\n        },\n    ];\n}\n\nexport function makeHtmlValidator(): Array<Rule> {\n    return [\n        {\n            message: 'Invalid HTML.',\n            validator: async (rule: RuleObject, value: string) => {\n                if (typeof document === 'undefined') {\n                    return;\n                }\n\n                const wrapper = document.createElement('div');\n\n                wrapper.innerHTML = value;\n\n                if (wrapper.innerHTML.trim() === value.trim()) {\n                    return;\n                }\n\n                throw new Error('HTML is not valid');\n            },\n        },\n    ];\n}\n\nexport function getArticleLinkToEdit(articleId: string): string {\n    return generatePath<typeof appRoute.articleEdit.path>(appRoute.articleEdit.path, {articleId});\n}\n\nexport function getFileExtension(fileName: string): string {\n    const hasExtension = fileName.includes('.');\n\n    if (!hasExtension) {\n        return '';\n    }\n\n    return (fileName.split('.').pop() || '').toLowerCase();\n}\n\nexport function getIsImage(fileName: string): boolean {\n    const fileExtension = getFileExtension(fileName);\n\n    return ['jpg', 'jpeg', 'jfif', 'gif', 'png', 'webp'].includes(fileExtension);\n}\n\nexport function getIsAudio(fileName: string): boolean {\n    const fileExtension = getFileExtension(fileName);\n\n    return ['mp3', 'wav'].includes(fileExtension);\n}\n\nexport function getIsVideo(fileName: string): boolean {\n    const fileExtension = getFileExtension(fileName);\n\n    return ['mp4'].includes(fileExtension);\n}\n\n/*\nexport async function getFileMarkdownByName(fileName: string): Promise<string> {\n    const pathToFile = getPathToFile(fileName);\n\n    if (getIsImage(fileName)) {\n        const pathToImage = getPathToImage(fileName, {height: 320, width: 320});\n        const {naturalHeight, naturalWidth} = await fetchImage(pathToFile);\n\n        return `![THE ALT](${pathToImage} \"THE TITLE\" height=\"${naturalHeight}\" width=\"${naturalWidth}\")`;\n    }\n\n    if (getIsAudio(fileName)) {\n        const {duration} = await fetchAudio(pathToFile);\n\n        return `<audio data-duration=\"${duration}\" data-download=\"\" src=\"${pathToFile}\"></audio>`;\n    }\n\n    return `<a href=\"${pathToFile}\" target=\"_blank\" download=\"${fileName}\">${fileName}</a>`;\n}\n*/\n\nexport function getAbsentIdList(\n    subDocumentIdList: Array<string>,\n    savedArticleList: Array<ArticleForValidationType>\n): Array<string> {\n    if (savedArticleList.length === 0) {\n        return [];\n    }\n\n    return subDocumentIdList.filter((id: string): boolean => {\n        return !savedArticleList.some((article: ArticleForValidationType): boolean => article.id === id);\n    });\n}\n\nexport function handleDeleteArticle(articleId: string): Promise<unknown> {\n    return deleteArticle(articleId)\n        .then((): unknown => location.reload())\n        .catch(console.error);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"markdown_input_wrapper\":\"d6389f\"};","import {Row, Col} from 'antd';\n\nimport {Box} from '../box/box';\nimport {Markdown} from '../markdown/markdown';\n\nimport markdownInputWrapperStyle from './markdown-input-wrapper.scss';\n\ntype MarkdownInputWrapperPropsType = {\n    children: JSX.Element;\n    mdInput: string;\n};\n\nexport function MarkdownInputWrapper(props: MarkdownInputWrapperPropsType): JSX.Element {\n    const {mdInput, children} = props;\n\n    return (\n        <Row className={markdownInputWrapperStyle.markdown_input_wrapper} gutter={[16, 0]}>\n            <Col span={12}>{children}</Col>\n            <Col span={12}>\n                <Box backgroundColor=\"#fff\" height=\"calc(100% - 54px)\" margin={[32, 0, 16]} padding={[8]}>\n                    <Markdown articleTitle=\"\" mdInput={mdInput} />\n                </Box>\n            </Col>\n        </Row>\n    );\n}\n","import {Typography, Select, Button} from 'antd';\nimport {PlusOutlined} from '@ant-design/icons';\nimport {UploadFile} from 'antd/es/upload/interface';\nimport {Link} from 'react-router-dom';\n\nimport {ArticleFileType, ArticleType} from '../../../../server/article/article-type';\nimport {getArticleLinkToViewClient} from '../../../client-component/article/article-helper';\nimport {getPathToImage, getPathToFile} from '../../../util/path';\n\nimport {ArticleForValidationType} from './cms-article-type';\nimport {getArticleLinkToEdit, getIsImage} from './cms-article-helper';\n\nconst {Option} = Select;\nconst {Text} = Typography;\n\nexport function makeFileListItem(fileInfo: ArticleFileType): UploadFile<unknown> {\n    const {name: fileInfoName} = fileInfo;\n\n    const url = getIsImage(fileInfoName)\n        ? getPathToImage(fileInfoName, {height: 96, width: 96})\n        : getPathToFile(fileInfoName);\n\n    return {\n        name: fileInfoName,\n        status: 'done',\n        uid: fileInfoName,\n        url,\n    };\n}\n\nexport function makeSubDocumentOption(articleForValidation: ArticleForValidationType): JSX.Element {\n    const {title, id} = articleForValidation;\n\n    return (\n        <Option key={id} title={title} value={id}>\n            {title}\n        </Option>\n    );\n}\n\nexport function getParentList(\n    article: ArticleType,\n    savedArticleList: Array<ArticleForValidationType>\n): Array<ArticleForValidationType> {\n    const {id: articleId} = article;\n\n    return savedArticleList.filter((savedArticle: ArticleForValidationType): boolean =>\n        savedArticle.subDocumentIdList.includes(articleId)\n    );\n}\n\nexport function renderParentList(\n    article: ArticleType,\n    savedArticleList: Array<ArticleForValidationType>\n): Array<JSX.Element> {\n    const parentList: Array<JSX.Element> = getParentList(article, savedArticleList).map(\n        (savedArticle: ArticleForValidationType, index: number): JSX.Element => {\n            const {id, title, slug} = savedArticle;\n\n            return (\n                <Text key={id}>\n                    {index > 0 ? ', ' : null}\n                    <Link to={getArticleLinkToViewClient(slug)}>{title}</Link>\n                    &nbsp;|&nbsp;\n                    <Link to={getArticleLinkToEdit(id)}>{slug}</Link>\n                </Text>\n            );\n        }\n    );\n\n    if (parentList.length > 0) {\n        return parentList;\n    }\n\n    return [<Text key=\"no-parents\">no parents</Text>];\n}\n\nexport function UploadButton(): JSX.Element {\n    return <Button icon={<PlusOutlined />}>Upload</Button>;\n}\n","/* global HTMLInputElement */\nimport {SyntheticEvent} from 'react';\nimport {Typography, Input, Col, Row} from 'antd';\nimport {UploadFile} from 'antd/es/upload/interface';\nconst {Title} = Typography;\n\nimport {ArticleFileType} from '../../../../server/article/article-type';\nimport {Box} from '../../../layout/box/box';\n\nimport {getFileMarkdownByFullInfo} from '../../../layout/markdown/markdown-helper';\n\ntype UploadedFileListItemPropsType = {\n    file: UploadFile<unknown>;\n    fileInfo: ArticleFileType | void;\n    originNode: JSX.Element;\n    setFileTitle: (newFileTitle: string) => void;\n    // uploadedFileList: Array<UploadFile<unknown>>,\n    // actions: { download: () => void; preview: () => void; remove: () => void }\n};\n\nexport function renderUploadedFileListItem(props: UploadedFileListItemPropsType): JSX.Element {\n    const {setFileTitle, fileInfo, originNode, file} = props;\n\n    if (!fileInfo) {\n        return (\n            <Title level={4} type=\"danger\">\n                Can not found file by name: {file.name}\n            </Title>\n        );\n    }\n\n    return (\n        <Box height={112}>\n            {originNode}\n            <Row gutter={8}>\n                <Col span={12}>\n                    <Input\n                        defaultValue={fileInfo.title}\n                        onInput={(evt: SyntheticEvent<HTMLInputElement>) => {\n                            setFileTitle(evt.currentTarget.value.trim());\n                        }}\n                        placeholder=\"Title\"\n                    />\n                </Col>\n                <Col span={12}>\n                    <Input readOnly value={getFileMarkdownByFullInfo(fileInfo, {alt: '', poster: ''})} />\n                </Col>\n            </Row>\n        </Box>\n    );\n}\n","/* global File */\n\nimport {useEffect, useState} from 'react';\nimport {\n    Button,\n    Checkbox,\n    DatePicker,\n    Divider,\n    Form,\n    Input,\n    message,\n    Popconfirm,\n    Select,\n    Typography,\n    Upload,\n} from 'antd';\nimport {FieldData, ValidateErrorEntity} from 'rc-field-form/lib/interface';\nimport {UploadChangeParam, UploadFile} from 'antd/es/upload/interface';\nimport {Link} from 'react-router-dom';\nimport {QuestionCircleOutlined} from '@ant-design/icons';\nimport {red} from '@ant-design/colors';\nimport dayjs, {Dayjs} from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n\nimport {\n    ArticleFileType,\n    ArticleType,\n    ArticleTypeEnum,\n    SubDocumentListViewTypeEnum,\n} from '../../../../server/article/article-type';\nimport {validateArticle} from '../../../../server/article/article-validation';\nimport {\n    arrayToStringByComma,\n    humanNormalizeString,\n    makeTagsPreview,\n    stringToArrayByComma,\n    textToSlug,\n} from '../../../util/human';\nimport {useMakeExecutableState} from '../../../util/function';\nimport {PaginationResultType} from '../../../../server/data-base/data-base-type';\nimport {getArticleListPaginationPick} from '../../../service/article/article-api';\nimport {MarkdownInputWrapper} from '../../../layout/markdown-input-wrapper/markdown-input-wrapper';\nimport {IsRender} from '../../../layout/is-render/is-render';\nimport {rootArticleId} from '../../../../server/article/article-const';\nimport {getArticleLinkToViewClient} from '../../../client-component/article/article-helper';\nimport {Box} from '../../../layout/box/box';\nimport {HotKeyModifierEnum, useHotKey} from '../../../util/hot-key';\nimport {makeDefaultArticleFile} from '../../../../server/article/article-helper';\nimport {Spinner} from '../../../layout/spinner/spinner';\n\nimport {\n    getAbsentIdList,\n    getArticleLinkToEdit,\n    getIsImage,\n    handleDeleteArticle,\n    makeHtmlValidator,\n    makeSlugValidator,\n    uploadFile,\n} from './cms-article-helper';\nimport {\n    getParentList,\n    makeFileListItem,\n    makeSubDocumentOption,\n    renderParentList,\n    UploadButton,\n} from './cms-article-layout';\nimport {\n    CmsArticleModeEnum,\n    fileSizeLimit,\n    imageAccept,\n    imageFileSizeLimit,\n    keyForValidationList,\n    noDateUTC,\n} from './cms-article-const';\nimport {ArticleForValidationType} from './cms-article-type';\nimport {renderUploadedFileListItem} from './render-uploaded-file-list-item';\n\nconst {Text, Title} = Typography;\nconst {Option} = Select;\nconst {TextArea} = Input;\n\ntype CmsArticlePropsType = {\n    article: ArticleType;\n    mode: CmsArticleModeEnum;\n    onFinish: (article: ArticleType) => void;\n};\n\n// eslint-disable-next-line complexity, max-statements\nexport function CmsArticle(props: CmsArticlePropsType): JSX.Element {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    const {article, onFinish, mode} = props;\n    const {\n        articleType,\n        content,\n        createdDate,\n        description,\n        descriptionShort,\n        fileList: defaultFileList,\n        hasMetaRobotsNoFollowSeo, // Add/combine <meta name=\"robots\" content=\"nofollow\"/>\n        hasMetaRobotsNoIndexSeo, // Add/combine <meta name=\"robots\" content=\"noindex\"/> and add X-Robots-Tag: noindex\n        id,\n        isActive, // actually temporary \"removed\"\n        isInSiteMapXmlSeo, // has sitemap.xml link to article or not\n        metaDescriptionSeo, // tag <meta name=\"description\" content=\".....\" />\n        metaKeyWordsSeo, // tag <meta name=\"keywords\" content=\".....\" />\n        metaSeo, // actually any html code\n        publishDate: defaultPublishDate,\n        slug,\n        staffArtistList,\n        staffAuthorList,\n        staffCompositorList,\n        staffDirectorList,\n        staffIllustratorList,\n        staffReaderList,\n        subDocumentIdList,\n        subDocumentListViewType,\n        tagList,\n        tagTitleSeo, // tag <title>....</title>\n        title,\n        titleImage: defaultTitleImage,\n        updatedDate,\n    } = article;\n\n    const [form] = Form.useForm<ArticleType>();\n    const [fileList, setFileList] = useState<Array<ArticleFileType>>([...defaultFileList]);\n    const [titleImage, setTitleImage] = useState<ArticleFileType>(defaultTitleImage);\n    const [publishDate, setPublishDate] = useState<string>(defaultPublishDate || new Date().toISOString());\n    const [recommendedSlug, setRecommendedSlug] = useState<string>(textToSlug(title));\n    const [currentArticleState, setCurrentArticleState] = useState<ArticleType>(article);\n    const [isFileLoading, setIsFileLoading] = useState<boolean>(false);\n\n    useHotKey([HotKeyModifierEnum.ctrl], 's', form.submit);\n\n    const {execute: executeArticleListPaginationPick} = useMakeExecutableState<\n        Parameters<typeof getArticleListPaginationPick<keyof ArticleForValidationType>>,\n        PaginationResultType<ArticleForValidationType>\n    >(getArticleListPaginationPick);\n\n    const [savedArticleList, setSavedArticleList] = useState<Array<ArticleForValidationType>>([]);\n\n    useEffect(() => {\n        executeArticleListPaginationPick({}, {pageIndex: 0, pageSize: 0, sort: {title: 1}}, keyForValidationList)\n            .then((data: PaginationResultType<ArticleForValidationType>) => setSavedArticleList(data.list))\n            .catch((error: Error) => {\n                console.log(error);\n                message.error('Can not fetch article list.');\n            });\n    }, [executeArticleListPaginationPick]);\n\n    function onFinishForm(rawValues: ArticleType) {\n        const values: ArticleType = {\n            ...rawValues,\n            fileList,\n            publishDate,\n            staffArtistList: stringToArrayByComma(rawValues.staffArtistList),\n            staffAuthorList: stringToArrayByComma(rawValues.staffAuthorList),\n            staffCompositorList: stringToArrayByComma(rawValues.staffCompositorList),\n            staffDirectorList: stringToArrayByComma(rawValues.staffDirectorList),\n            staffIllustratorList: stringToArrayByComma(rawValues.staffIllustratorList),\n            staffReaderList: stringToArrayByComma(rawValues.staffReaderList),\n            tagList: stringToArrayByComma(rawValues.tagList),\n            title: humanNormalizeString(rawValues.title),\n            titleImage,\n        };\n        // validate form\n        const [isValidArticle, validateFunction] = validateArticle(values);\n\n        console.info('validateFunction.errors');\n        console.info(validateFunction.errors);\n        console.log('onFinishForm, is valid -', isValidArticle);\n        console.log('---> onFinishForm, values -', values);\n        console.log('---> onFinishForm, fileList -', fileList);\n\n        if (isValidArticle) {\n            onFinish(values);\n            return;\n        }\n\n        message.error(JSON.stringify(validateFunction.errors));\n    }\n\n    function onFinishFailedForm(errorInfo: ValidateErrorEntity<ArticleType>) {\n        message.error(JSON.stringify(errorInfo.errorFields));\n        console.log('onFinishFailedForm:', errorInfo);\n        console.log('onFinishFailedForm:', article);\n    }\n\n    function onValuesChangeForm(changedValues: unknown, values: ArticleType) {\n        setRecommendedSlug(textToSlug(values.title));\n        setCurrentArticleState(values);\n        console.log('onValuesChangeForm:', changedValues, values);\n        console.log('onValuesChangeForm:', article);\n    }\n\n    function onFieldsChangeForm(changedFields: Array<FieldData>, allFields: Array<FieldData>) {\n        console.log('onFieldsChangeForm:', changedFields, allFields);\n        console.log('onFieldsChangeForm:', article);\n    }\n\n    function handleChangeFileList(info: UploadChangeParam<UploadFile<unknown>>) {\n        const {file} = info;\n\n        if (file.status === 'removed') {\n            setFileList((currentFileList: Array<ArticleFileType>): Array<ArticleFileType> => {\n                return currentFileList.filter((fileInfo: ArticleFileType): boolean => fileInfo.name !== file.name);\n            });\n        }\n\n        console.log('handleChangeFileList:', info);\n        console.log('handleChangeFileList:', article);\n    }\n\n    function handleChangeTitleImage(info: UploadChangeParam<UploadFile<unknown>>) {\n        const {file} = info;\n\n        if (file.status === 'removed') {\n            setTitleImage(makeDefaultArticleFile());\n        }\n\n        console.log('handleChangeTitleImage:', info);\n        console.log('handleChangeTitleImage:', article);\n    }\n\n    const absentIdList = getAbsentIdList(subDocumentIdList, savedArticleList);\n    const parentList = getParentList(article, savedArticleList);\n    const hasParent = parentList.length > 0;\n    const isDisableToDelete = hasParent || id === rootArticleId;\n\n    return (\n        <Form<ArticleType>\n            autoComplete=\"off\"\n            form={form}\n            initialValues={{remember: true}}\n            layout=\"vertical\"\n            name=\"article\"\n            onFieldsChange={onFieldsChangeForm}\n            onFinish={onFinishForm}\n            onFinishFailed={onFinishFailedForm}\n            onValuesChange={onValuesChangeForm}\n            scrollToFirstError\n        >\n            <Spinner isShow={isFileLoading} position=\"fixed\" />\n            <IsRender isRender={absentIdList.length > 0}>\n                <Title level={4} type=\"danger\">\n                    Document has missing children, children Id:&nbsp;{absentIdList.join(', ')}\n                </Title>\n            </IsRender>\n\n            <Box padding={[8, 0]}>\n                <Text>\n                    Article:&nbsp;\n                    <Link to={getArticleLinkToViewClient(slug)}>{title}</Link>\n                    &nbsp;|&nbsp;\n                    <Link to={getArticleLinkToEdit(id)}>{slug}</Link>\n                </Text>\n            </Box>\n\n            <Box padding={[8, 0, 16]}>\n                <Text>Parents:&nbsp;{renderParentList(article, savedArticleList)}</Text>\n            </Box>\n\n            <Form.Item hidden initialValue={id} label={`Article id: ${id}`} name=\"id\">\n                <Input disabled />\n            </Form.Item>\n\n            <Form.Item label={`Title image (to 16MB): ${titleImage.name}`}>\n                <Upload<unknown>\n                    accept={imageAccept}\n                    action={async (file: File): Promise<string> => {\n                        try {\n                            setIsFileLoading(true);\n\n                            const uploadedFileInfo: ArticleFileType = await uploadFile(file, imageFileSizeLimit);\n\n                            setTitleImage(uploadedFileInfo);\n                        } catch (error: unknown) {\n                            const errorMessage = error instanceof Error ? error.message : 'Too big file';\n\n                            message.error(errorMessage);\n                        } finally {\n                            setIsFileLoading(false);\n                        }\n\n                        // just prevent extra request to our server\n                        return 'https://dev.null/dev/null';\n                    }}\n                    fileList={titleImage.size > 0 ? [titleImage].map(makeFileListItem) : []}\n                    itemRender={(originNode: JSX.Element, file: UploadFile<unknown>): JSX.Element => {\n                        return renderUploadedFileListItem({\n                            file,\n                            fileInfo: titleImage,\n                            originNode,\n                            setFileTitle: (newFileTitle: string) => {\n                                setTitleImage({\n                                    ...titleImage,\n                                    title: newFileTitle,\n                                });\n                            },\n                        });\n                    }}\n                    listType=\"picture\"\n                    maxCount={1}\n                    onChange={handleChangeTitleImage}\n                >\n                    {titleImage.size > 0 ? null : <UploadButton />}\n                </Upload>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={title}\n                label=\"Title:\"\n                name=\"title\"\n                rules={[{message: 'Required!', required: true}]}\n            >\n                <Input placeholder=\"Title\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={slug}\n                label={`Slug, avoid spec symbols, slug from title: ${recommendedSlug}`}\n                name=\"slug\"\n                normalize={textToSlug}\n                rules={makeSlugValidator({id, mode, savedArticleList})}\n            >\n                <Input disabled={savedArticleList.length === 0} placeholder=\"slug-is-here\" />\n            </Form.Item>\n\n            <Form.Item initialValue={articleType} label=\"Article type:\" name=\"articleType\">\n                <Select<ArticleTypeEnum>>\n                    <Option value={ArticleTypeEnum.article}>Article</Option>\n                    <Option value={ArticleTypeEnum.container}>Container</Option>\n                    <Option value={ArticleTypeEnum.audioList}>Audio List</Option>\n                    <Option value={ArticleTypeEnum.audioSingle}>Audio Single</Option>\n                    <Option value={ArticleTypeEnum.audioChildrenList}>Audio Children List</Option>\n                </Select>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(tagList)}\n                label={`Tag List, use comma \",\" to divide: ${makeTagsPreview(currentArticleState.tagList)}`}\n                name=\"tagList\"\n            >\n                <Input placeholder=\"Tag1, Tag2, Tag3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={subDocumentListViewType}\n                label=\"Sub Document List View Type:\"\n                name=\"subDocumentListViewType\"\n            >\n                <Select<SubDocumentListViewTypeEnum>>\n                    <Option value={SubDocumentListViewTypeEnum.header}>Header</Option>\n                    <Option value={SubDocumentListViewTypeEnum.headerImage}>Header-Image</Option>\n                </Select>\n            </Form.Item>\n\n            <Form.Item initialValue={subDocumentIdList} label=\"Sub Document List:\" name=\"subDocumentIdList\">\n                <Select<Array<string>>\n                    disabled={savedArticleList.length === 0}\n                    filterOption\n                    loading={savedArticleList.length === 0}\n                    mode=\"multiple\"\n                    optionFilterProp=\"title\"\n                    placeholder=\"Sub Document Id...\"\n                >\n                    {savedArticleList.map(makeSubDocumentOption)}\n                </Select>\n            </Form.Item>\n\n            <MarkdownInputWrapper mdInput={currentArticleState.content}>\n                <Form.Item initialValue={content} label=\"Content, use markdown:\" name=\"content\">\n                    <TextArea placeholder=\"# Markdown...\" rows={10} />\n                </Form.Item>\n            </MarkdownInputWrapper>\n\n            <MarkdownInputWrapper mdInput={currentArticleState.description}>\n                <Form.Item initialValue={description} label=\"Description, use markdown:\" name=\"description\">\n                    <TextArea placeholder=\"Some description is here...\" rows={3} />\n                </Form.Item>\n            </MarkdownInputWrapper>\n\n            <Form.Item\n                initialValue={descriptionShort}\n                label=\"Short description, plain text only, used for Open Graph, Twitter Card and markup schema (https://schema.org):\"\n                name=\"descriptionShort\"\n            >\n                <TextArea placeholder=\"Some short description is here...\" rows={3} />\n            </Form.Item>\n\n            <Form.Item label={`Files (image to 16MB, other to 75MB): ${fileList.length}`}>\n                <Upload<unknown>\n                    // accept={fileAccept}\n                    action={async (file: File): Promise<string> => {\n                        try {\n                            setIsFileLoading(true);\n\n                            const sizeLimit = getIsImage(file.name) ? imageFileSizeLimit : fileSizeLimit;\n                            const uploadedFileInfo: ArticleFileType = await uploadFile(file, sizeLimit);\n\n                            setFileList((currentFileList: Array<ArticleFileType>): Array<ArticleFileType> => {\n                                return [...currentFileList, uploadedFileInfo];\n                            });\n                        } catch (error: unknown) {\n                            const errorMessage = error instanceof Error ? error.message : 'Too big file';\n\n                            message.error(errorMessage);\n                        } finally {\n                            setIsFileLoading(false);\n                        }\n\n                        // just prevent extra request to our server\n                        return 'https://dev.null/dev/null';\n                    }}\n                    fileList={fileList.map(makeFileListItem)}\n                    // itemRender={renderUploadedFileListItem}\n                    itemRender={(originNode: JSX.Element, file: UploadFile<unknown>): JSX.Element => {\n                        const fileInfo = fileList.find(\n                            (fileInfoIList: ArticleFileType): boolean => fileInfoIList.name === file.name\n                        );\n\n                        return renderUploadedFileListItem({\n                            file,\n                            fileInfo,\n                            originNode,\n                            setFileTitle: (newFileTitle: string) => {\n                                if (fileInfo) {\n                                    fileInfo.title = newFileTitle;\n                                    setFileList([...fileList]);\n                                }\n                            },\n                        });\n                    }}\n                    listType=\"picture\"\n                    onChange={handleChangeFileList}\n                >\n                    <UploadButton />\n                </Upload>\n            </Form.Item>\n\n            <Form.Item initialValue={dayjs.utc(publishDate)} label=\"Publish date UTC-0:\" name=\"publishDate\">\n                <DatePicker onOk={(date: Dayjs): void => setPublishDate(date.toISOString())} showTime />\n            </Form.Item>\n\n            <Form.Item\n                // set on server\n                initialValue={createdDate || noDateUTC}\n                label=\"Created date UTC-0:\"\n                name=\"createdDate\"\n            >\n                <Input disabled />\n            </Form.Item>\n\n            <Form.Item\n                // set on server\n                initialValue={updatedDate || noDateUTC}\n                label=\"Updated date UTC-0:\"\n                name=\"updatedDate\"\n            >\n                <Input disabled />\n            </Form.Item>\n\n            <Divider orientation=\"center\">SEO</Divider>\n\n            <Form.Item initialValue={tagTitleSeo} label=\"Meta Title, tag <title>...</title>:\" name=\"tagTitleSeo\">\n                <Input placeholder=\"Title...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={hasMetaRobotsNoFollowSeo}\n                label=\"Has Meta Robots No Follow:\"\n                name=\"hasMetaRobotsNoFollowSeo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox>Add/combine &lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot; /&gt;</Checkbox>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={hasMetaRobotsNoIndexSeo}\n                label=\"Has Meta Robots No Index:\"\n                name=\"hasMetaRobotsNoIndexSeo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox>\n                    Add/combine &lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;/&gt; and add X-Robots-Tag:\n                    noindex\n                </Checkbox>\n            </Form.Item>\n\n            <Form.Item initialValue={isActive} label=\"Is Active:\" name=\"isActive\" valuePropName=\"checked\">\n                <Checkbox>Uncheck to temporary &quot;remove&quot; (also remove from sitemap.xml)</Checkbox>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={isInSiteMapXmlSeo}\n                label=\"Is In Site Map Xml:\"\n                name=\"isInSiteMapXmlSeo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox>Does sitemap.xml has link to article or not</Checkbox>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={metaDescriptionSeo}\n                label={'Meta Description, tag <meta name=\"description\" content=\"...\" />:'}\n                name=\"metaDescriptionSeo\"\n            >\n                <Input placeholder=\"Description...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={metaKeyWordsSeo}\n                label={'Meta KeyWords, tag <meta name=\"keywords\" content=\"...\" />:'}\n                name=\"metaKeyWordsSeo\"\n            >\n                <Input placeholder=\"KeyWords...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={metaSeo}\n                label=\"Meta, actually any valid html code:\"\n                name=\"metaSeo\"\n                rules={makeHtmlValidator()}\n            >\n                <TextArea placeholder=\"Additional meta tags...\" rows={3} />\n            </Form.Item>\n\n            <Divider orientation=\"center\">Staff</Divider>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffArtistList)}\n                label={`Staff Artists, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffArtistList\n                )}`}\n                name=\"staffArtistList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffAuthorList)}\n                label={`Staff Authors, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffAuthorList\n                )}`}\n                name=\"staffAuthorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffCompositorList)}\n                label={`Staff Compositors, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffCompositorList\n                )}`}\n                name=\"staffCompositorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffDirectorList)}\n                label={`Staff Directors, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffDirectorList\n                )}`}\n                name=\"staffDirectorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffIllustratorList)}\n                label={`Staff Illustrators, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffIllustratorList\n                )}`}\n                name=\"staffIllustratorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffReaderList)}\n                label={`Staff Readers, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffReaderList\n                )}`}\n                name=\"staffReaderList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item>\n                <Button htmlType=\"submit\" type=\"primary\">\n                    Submit (ctrl+S)\n                </Button>\n                <IsRender isRender={mode === CmsArticleModeEnum.edit}>\n                    &nbsp;\n                    <Popconfirm\n                        cancelText=\"No\"\n                        disabled={isDisableToDelete}\n                        icon={<QuestionCircleOutlined style={{color: red.primary}} />}\n                        okText=\"Delete\"\n                        onConfirm={() => handleDeleteArticle(id)}\n                        title=\"Are you sure to delete the article？\"\n                    >\n                        <Button disabled={isDisableToDelete} htmlType=\"button\" type=\"default\">\n                            {isDisableToDelete ? 'Can NOT delete, article has parent' : 'Delete'}\n                        </Button>\n                    </Popconfirm>\n                </IsRender>\n            </Form.Item>\n        </Form>\n    );\n}\n","import {ReactNode} from 'react';\nimport {Layout, Menu} from 'antd';\nimport {Link, useLocation} from 'react-router-dom';\n\nimport 'antd/dist/reset.css';\n\nimport {Box} from '../../../../layout/box/box';\nimport {appRoute} from '../../../../component/app/app-route';\n\nconst {Content} = Layout;\n\ntype CmsPagePropsType = {\n    children: ReactNode;\n};\n\nexport function CmsPage(props: CmsPagePropsType): JSX.Element {\n    const {children} = props;\n    const routerLocation = useLocation();\n\n    return (\n        <Layout>\n            <Box padding={16}>\n                <Menu\n                    defaultSelectedKeys={[routerLocation.pathname]}\n                    items={[\n                        {\n                            key: appRoute.articleList.path,\n                            label: <Link to={appRoute.articleList.path}>List</Link>,\n                        },\n                        {\n                            key: appRoute.articleCreate.path,\n                            label: <Link to={appRoute.articleCreate.path}>Create</Link>,\n                        },\n                        {\n                            key: appRoute.articleTree.path,\n                            label: <Link to={appRoute.articleTree.path}>Tree</Link>,\n                        },\n                    ]}\n                    mode=\"horizontal\"\n                />\n            </Box>\n\n            <Box padding={16}>\n                <Content>{children}</Content>\n            </Box>\n\n            {/* <Footer>Footer is here</Footer> */}\n        </Layout>\n    );\n}\n"],"names":["makeCssArray","value","Array","isArray","length","console","error","Box","props","tagName","TagName","children","margin","padding","width","height","boxSizing","backgroundColor","display","marginTop","marginRight","marginBottom","marginLeft","paddingTop","paddingRight","paddingBottom","paddingLeft","map","style","_jsx","CmsArticleModeEnum","keyForValidationList","noDateUTC","imageAccept","imageFileSizeLimit","fileSizeLimit","async","uploadFile","file","fileSizeLimitBytes","formData","FormData","size","Error","append","fileInfo","fetchX","apiUrl","adminFileUpload","makeArticleFileSchema","body","credentials","method","FetchMethodEnum","post","pathToFile","getPathToFile","name","type","ArticleFileTypeEnum","image","naturalHeight","naturalWidth","pathToImage","Image","Promise","resolve","reject","addEventListener","src","fetchImage","audio","duration","pathToAudio","Audio","preload","fetchAudio","video","videoWidth","videoHeight","pathToVideo","document","createElement","fetchVideo","unknown","NeverError","makeSlugValidator","data","id","mode","savedArticleList","message","required","validator","rule","textToSlug","savedArticleBySlugList","filter","savedArticle","slug","savedArticleBySlugListLength","isSavedArticle","create","savedArticleForValidation","edit","makeHtmlValidator","wrapper","innerHTML","trim","getArticleLinkToEdit","articleId","generatePath","appRoute","articleEdit","path","getIsImage","fileName","fileExtension","includes","split","pop","toLowerCase","getFileExtension","getAbsentIdList","subDocumentIdList","some","article","handleDeleteArticle","deleteArticle","then","location","reload","catch","MarkdownInputWrapper","mdInput","_jsxs","Row","className","markdownInputWrapperStyle","markdown_input_wrapper","gutter","Col","span","Markdown","articleTitle","Option","Select","Text","Typography","makeFileListItem","fileInfoName","status","uid","url","getPathToImage","makeSubDocumentOption","articleForValidation","title","getParentList","renderParentList","parentList","index","Link","to","getArticleLinkToViewClient","UploadButton","Button","icon","PlusOutlined","Title","renderUploadedFileListItem","setFileTitle","originNode","Input","defaultValue","onInput","evt","currentTarget","placeholder","readOnly","getFileMarkdownByFullInfo","alt","poster","level","dayjs","utc","TextArea","CmsArticle","onFinish","articleType","content","createdDate","description","descriptionShort","fileList","defaultFileList","hasMetaRobotsNoFollowSeo","hasMetaRobotsNoIndexSeo","isActive","isInSiteMapXmlSeo","metaDescriptionSeo","metaKeyWordsSeo","metaSeo","publishDate","defaultPublishDate","staffArtistList","staffAuthorList","staffCompositorList","staffDirectorList","staffIllustratorList","staffReaderList","subDocumentListViewType","tagList","tagTitleSeo","titleImage","defaultTitleImage","updatedDate","form","Form","useForm","setFileList","useState","setTitleImage","setPublishDate","Date","toISOString","recommendedSlug","setRecommendedSlug","currentArticleState","setCurrentArticleState","isFileLoading","setIsFileLoading","useHotKey","HotKeyModifierEnum","ctrl","submit","execute","executeArticleListPaginationPick","useMakeExecutableState","getArticleListPaginationPick","setSavedArticleList","useEffect","pageIndex","pageSize","sort","list","absentIdList","isDisableToDelete","rootArticleId","autoComplete","initialValues","remember","layout","onFieldsChange","changedFields","allFields","rawValues","values","stringToArrayByComma","humanNormalizeString","isValidArticle","validateFunction","validateArticle","info","errors","JSON","stringify","onFinishFailed","errorInfo","errorFields","onValuesChange","changedValues","scrollToFirstError","Spinner","isShow","position","IsRender","isRender","join","Item","hidden","initialValue","label","disabled","Upload","accept","action","uploadedFileInfo","errorMessage","itemRender","newFileTitle","listType","maxCount","onChange","makeDefaultArticleFile","rules","normalize","ArticleTypeEnum","container","audioList","audioSingle","audioChildrenList","arrayToStringByComma","makeTagsPreview","SubDocumentListViewTypeEnum","header","headerImage","filterOption","loading","optionFilterProp","rows","sizeLimit","currentFileList","find","fileInfoIList","DatePicker","onOk","date","showTime","Divider","orientation","valuePropName","Checkbox","htmlType","Popconfirm","cancelText","QuestionCircleOutlined","color","red","primary","okText","onConfirm","Content","Layout","CmsPage","routerLocation","useLocation","Menu","defaultSelectedKeys","pathname","items","key","articleList","articleCreate","articleTree"],"sourceRoot":""}
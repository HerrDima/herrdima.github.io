{"version":3,"file":"225.bb63ef.chunk.js","mappings":"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","sources":["webpack://min-svenska/./www/layout/box/box-helper.ts","webpack://min-svenska/./www/layout/box/box.tsx","webpack://min-svenska/./www/page/cms/cms-article/cms-article-const.ts","webpack://min-svenska/./www/page/cms/cms-article/cms-article-helper.tsx","webpack://min-svenska/./www/layout/markdown-input-wrapper/markdown-input-wrapper.tsx","webpack://min-svenska/./www/layout/markdown-input-wrapper/markdown-input-wrapper.scss?1209","webpack://min-svenska/./www/page/cms/cms-article/cms-article-layout.tsx","webpack://min-svenska/./www/page/cms/cms-article/render-uploaded-file-list-item.tsx","webpack://min-svenska/./www/page/cms/cms-article/cms-article.tsx","webpack://min-svenska/./www/page/cms/layout/cms-page/cms-page.tsx"],"sourcesContent":["// eslint-disable-next-line complexity\nexport function makeCssArray(value?: Array<number> | number): [number, number, number, number] {\n    if (typeof value === 'number') {\n        return [value, value, value, value];\n    }\n\n    if (!Array.isArray(value)) {\n        return [0, 0, 0, 0];\n    }\n\n    const arrayLength = value.length;\n\n    switch (arrayLength) {\n        case 0: {\n            return [0, 0, 0, 0];\n        }\n        case 1: {\n            return [value[0], value[0], value[0], value[0]];\n        }\n        case 2: {\n            return [value[0], value[1], value[0], value[1]];\n        }\n        case 3: {\n            return [value[0], value[1], value[2], value[1]];\n        }\n        case 4: {\n            return [value[0], value[1], value[2], value[3]];\n        }\n        default: {\n            console.error('makeCssArray: too big array');\n            return [value[0], value[1], value[2], value[3]];\n        }\n    }\n}\n","import {ReactNode, ElementType, CSSProperties} from 'react';\n\nimport {makeCssArray} from './box-helper';\n\ntype BoxPropsType = {\n    backgroundColor?: string;\n    boxSizing?: 'border-box' | 'content-box' | 'initial';\n    children?: ReactNode;\n    display?: 'block' | 'flex' | 'inline';\n    height?: number | string;\n    margin?: Array<number> | number;\n    padding?: Array<number> | number;\n    tagName?: ElementType;\n    width?: number | string;\n};\n\nexport function Box(props: BoxPropsType): JSX.Element {\n    const {\n        tagName: TagName = 'div',\n        children,\n        margin,\n        padding,\n        width,\n        height,\n        boxSizing,\n        backgroundColor,\n        display,\n    } = props;\n\n    const [marginTop, marginRight, marginBottom, marginLeft, paddingTop, paddingRight, paddingBottom, paddingLeft] = [\n        ...makeCssArray(margin),\n        ...makeCssArray(padding),\n    ].map((value: number): string => `${value}px`);\n\n    const style: CSSProperties = {\n        backgroundColor,\n        boxSizing,\n        display,\n        height,\n        marginBottom,\n        marginLeft,\n        marginRight,\n        marginTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight,\n        paddingTop,\n        width,\n    };\n\n    return <TagName style={style}>{children}</TagName>;\n}\n","import {KeyForValidationListType} from './cms-article-type';\n\nexport const enum CmsArticleModeEnum {\n    create = 'create',\n    edit = 'edit',\n}\n\nexport const keyForValidationList: KeyForValidationListType = ['id', 'slug', 'subDocumentIdList', 'title'];\nexport const noDateUTC = '0000-00-00T00:00:00.000Z';\n\nexport const imageAccept = 'image/png, image/jpeg, image/gif, image/webp';\nexport const fileAccept = `${imageAccept}, audio/mp3, audio/wav`;\nexport const imageFileSizeLimit = 16e6;\nexport const fileSizeLimit = 75e6;\n","/* global document, Image, HTMLImageElement, Audio, HTMLAudioElement, HTMLVideoElement, File, FormData, location */\nimport {Rule, RuleObject} from 'rc-field-form/lib/interface';\n\nimport {generatePath} from '../../../util/url';\nimport {textToSlug} from '../../../util/human';\nimport {appRoute} from '../../../component/app/app-route';\nimport {PromiseResolveType} from '../../../util/promise';\nimport {apiUrl} from '../../../../server/const';\nimport {FetchMethodEnum, fetchX} from '../../../util/fetch';\nimport {deleteArticle} from '../../../service/article/article-api';\nimport {ArticleFileType, ArticleFileTypeEnum} from '../../../../server/article/article-type';\nimport {makeArticleFileSchema} from '../../../../server/article/article-validation';\nimport {NeverError} from '../../../util/error';\n\nimport {getPathToFile} from '../../../util/path';\n\nimport {ArticleForValidationType, MakeSlugValidatorArgumentType} from './cms-article-type';\nimport {CmsArticleModeEnum} from './cms-article-const';\n\nexport function fetchImage(pathToImage: string): Promise<HTMLImageElement> {\n    const image = new Image();\n\n    return new Promise<HTMLImageElement>(\n        (resolve: PromiseResolveType<HTMLImageElement>, reject: PromiseResolveType<unknown>) => {\n            image.addEventListener('load', () => resolve(image), false);\n\n            image.addEventListener('error', reject, false);\n\n            image.src = pathToImage;\n        }\n    );\n}\n\nexport function fetchAudio(pathToAudio: string): Promise<HTMLAudioElement> {\n    const audio = new Audio();\n\n    return new Promise<HTMLAudioElement>(\n        (resolve: PromiseResolveType<HTMLAudioElement>, reject: PromiseResolveType<unknown>) => {\n            audio.addEventListener('loadedmetadata', () => resolve(audio), false);\n\n            audio.addEventListener('error', reject, false);\n\n            audio.preload = 'metadata';\n            audio.src = pathToAudio;\n        }\n    );\n}\n\nexport function fetchVideo(pathToVideo: string): Promise<HTMLVideoElement> {\n    const video: HTMLVideoElement = document.createElement('video');\n\n    return new Promise<HTMLVideoElement>(\n        (resolve: PromiseResolveType<HTMLVideoElement>, reject: PromiseResolveType<unknown>) => {\n            video.addEventListener('loadedmetadata', () => resolve(video), false);\n\n            video.addEventListener('error', reject, false);\n\n            video.preload = 'metadata';\n            video.src = pathToVideo;\n        }\n    );\n}\n\n// eslint-disable-next-line complexity\nexport async function uploadFile(file: File, fileSizeLimitBytes: number): Promise<ArticleFileType> {\n    const formData = new FormData();\n\n    if (file.size >= fileSizeLimitBytes) {\n        throw new Error(`Too big file, limit ${fileSizeLimitBytes / 1e6}MB`);\n    }\n\n    formData.append('file', file);\n\n    const fileInfo: ArticleFileType = await fetchX<ArticleFileType>(apiUrl.adminFileUpload, makeArticleFileSchema(), {\n        body: formData,\n        credentials: 'include',\n        method: FetchMethodEnum.post,\n    });\n\n    const pathToFile = getPathToFile(fileInfo.name);\n\n    switch (fileInfo.type) {\n        case ArticleFileTypeEnum.image: {\n            const {naturalHeight, naturalWidth} = await fetchImage(pathToFile);\n\n            return {\n                ...fileInfo,\n                height: naturalHeight,\n                width: naturalWidth,\n            };\n        }\n        case ArticleFileTypeEnum.audio: {\n            const {duration} = await fetchAudio(pathToFile);\n\n            return {\n                ...fileInfo,\n                duration,\n            };\n        }\n\n        case ArticleFileTypeEnum.video: {\n            const {duration, videoWidth, videoHeight} = await fetchVideo(pathToFile);\n\n            return {\n                ...fileInfo,\n                duration,\n                height: videoHeight,\n                width: videoWidth,\n            };\n        }\n\n        case ArticleFileTypeEnum.unknown: {\n            return fileInfo;\n        }\n\n        default: {\n            throw new NeverError(fileInfo.type);\n        }\n    }\n\n    // eslint-disable-next-line no-unreachable\n    return fileInfo;\n}\n\nexport function makeSlugValidator(data: MakeSlugValidatorArgumentType): Array<Rule> {\n    const {id, mode, savedArticleList} = data;\n\n    return [\n        {\n            message: 'Required!',\n            required: true,\n        },\n        {\n            message: 'Please-enter-slug-properly.',\n            validator: async (rule: RuleObject, value: string) => {\n                if (textToSlug(value) !== value) {\n                    throw new Error('Slug is not formatted.');\n                }\n            },\n        },\n        {\n            message: 'Please enter another slug. This slug already exists.',\n            // eslint-disable-next-line complexity\n            validator: async (rule: RuleObject, value: string) => {\n                const savedArticleBySlugList: Array<ArticleForValidationType> = savedArticleList.filter(\n                    (savedArticle: ArticleForValidationType): boolean => {\n                        return savedArticle.slug === value;\n                    }\n                );\n\n                const savedArticleBySlugListLength = savedArticleBySlugList.length;\n\n                if (savedArticleBySlugListLength === 0) {\n                    return;\n                }\n\n                if (savedArticleBySlugListLength >= 2) {\n                    throw new Error('There are should be only one no non articles');\n                }\n\n                const isSavedArticle: boolean = savedArticleBySlugListLength > 0;\n\n                if (mode === CmsArticleModeEnum.create && isSavedArticle) {\n                    throw new Error('Use unique slug.');\n                }\n\n                const [savedArticleForValidation] = savedArticleBySlugList;\n\n                if (\n                    mode === CmsArticleModeEnum.edit &&\n                    savedArticleForValidation.slug === value &&\n                    savedArticleForValidation.id !== id\n                ) {\n                    throw new Error('Article with your slug already exists');\n                }\n            },\n        },\n    ];\n}\n\nexport function makeHtmlValidator(): Array<Rule> {\n    return [\n        {\n            message: 'Invalid HTML.',\n            validator: async (rule: RuleObject, value: string) => {\n                if (typeof document === 'undefined') {\n                    return;\n                }\n\n                const wrapper = document.createElement('div');\n\n                wrapper.innerHTML = value;\n\n                if (wrapper.innerHTML.trim() === value.trim()) {\n                    return;\n                }\n\n                throw new Error('HTML is not valid');\n            },\n        },\n    ];\n}\n\nexport function getArticleLinkToEdit(articleId: string): string {\n    return generatePath<typeof appRoute.articleEdit.path>(appRoute.articleEdit.path, {articleId});\n}\n\nexport function getFileExtension(fileName: string): string {\n    const hasExtension = fileName.includes('.');\n\n    if (!hasExtension) {\n        return '';\n    }\n\n    return (fileName.split('.').pop() || '').toLowerCase();\n}\n\nexport function getIsImage(fileName: string): boolean {\n    const fileExtension = getFileExtension(fileName);\n\n    return ['jpg', 'jpeg', 'jfif', 'gif', 'png', 'webp'].includes(fileExtension);\n}\n\nexport function getIsAudio(fileName: string): boolean {\n    const fileExtension = getFileExtension(fileName);\n\n    return ['mp3', 'wav'].includes(fileExtension);\n}\n\nexport function getIsVideo(fileName: string): boolean {\n    const fileExtension = getFileExtension(fileName);\n\n    return ['mp4'].includes(fileExtension);\n}\n\n/*\nexport async function getFileMarkdownByName(fileName: string): Promise<string> {\n    const pathToFile = getPathToFile(fileName);\n\n    if (getIsImage(fileName)) {\n        const pathToImage = getPathToImage(fileName, {height: 320, width: 320});\n        const {naturalHeight, naturalWidth} = await fetchImage(pathToFile);\n\n        return `![THE ALT](${pathToImage} \"THE TITLE\" height=\"${naturalHeight}\" width=\"${naturalWidth}\")`;\n    }\n\n    if (getIsAudio(fileName)) {\n        const {duration} = await fetchAudio(pathToFile);\n\n        return `<audio data-duration=\"${duration}\" data-download=\"\" src=\"${pathToFile}\"></audio>`;\n    }\n\n    return `<a href=\"${pathToFile}\" target=\"_blank\" download=\"${fileName}\">${fileName}</a>`;\n}\n*/\n\nexport function getAbsentIdList(\n    subDocumentIdList: Array<string>,\n    savedArticleList: Array<ArticleForValidationType>\n): Array<string> {\n    if (savedArticleList.length === 0) {\n        return [];\n    }\n\n    return subDocumentIdList.filter((id: string): boolean => {\n        return !savedArticleList.some((article: ArticleForValidationType): boolean => article.id === id);\n    });\n}\n\nexport function handleDeleteArticle(articleId: string): Promise<unknown> {\n    return deleteArticle(articleId)\n        .then((): unknown => location.reload())\n        .catch(console.error);\n}\n","import {Row, Col} from 'antd';\n\nimport {Box} from '../box/box';\nimport {Markdown} from '../markdown/markdown';\n\nimport markdownInputWrapperStyle from './markdown-input-wrapper.scss';\n\ntype MarkdownInputWrapperPropsType = {\n    children: JSX.Element;\n    mdInput: string;\n};\n\nexport function MarkdownInputWrapper(props: MarkdownInputWrapperPropsType): JSX.Element {\n    const {mdInput, children} = props;\n\n    return (\n        <Row className={markdownInputWrapperStyle.markdown_input_wrapper} gutter={[16, 0]}>\n            <Col span={12}>{children}</Col>\n            <Col span={12}>\n                <Box backgroundColor=\"#fff\" height=\"calc(100% - 54px)\" margin={[32, 0, 16]} padding={[8]}>\n                    <Markdown articleTitle=\"\" mdInput={mdInput} />\n                </Box>\n            </Col>\n        </Row>\n    );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"markdown_input_wrapper\":\"d6389f\"};","import {Typography, Select, Button} from 'antd';\nimport {PlusOutlined} from '@ant-design/icons';\nimport {UploadFile} from 'antd/es/upload/interface';\nimport {Link} from 'react-router-dom';\n\nimport {ArticleFileType, ArticleType} from '../../../../server/article/article-type';\nimport {getArticleLinkToViewClient} from '../../../client-component/article/article-helper';\nimport {getPathToImage, getPathToFile} from '../../../util/path';\n\nimport {ArticleForValidationType} from './cms-article-type';\nimport {getArticleLinkToEdit, getIsImage} from './cms-article-helper';\n\nconst {Option} = Select;\nconst {Text} = Typography;\n\nexport function makeFileListItem(fileInfo: ArticleFileType): UploadFile<unknown> {\n    const {name: fileInfoName} = fileInfo;\n\n    const url = getIsImage(fileInfoName)\n        ? getPathToImage(fileInfoName, {height: 96, width: 96})\n        : getPathToFile(fileInfoName);\n\n    return {\n        name: fileInfoName,\n        status: 'done',\n        uid: fileInfoName,\n        url,\n    };\n}\n\nexport function makeSubDocumentOption(articleForValidation: ArticleForValidationType): JSX.Element {\n    const {title, id} = articleForValidation;\n\n    return (\n        <Option key={id} title={title} value={id}>\n            {title}\n        </Option>\n    );\n}\n\nexport function getParentList(\n    article: ArticleType,\n    savedArticleList: Array<ArticleForValidationType>\n): Array<ArticleForValidationType> {\n    const {id: articleId} = article;\n\n    return savedArticleList.filter((savedArticle: ArticleForValidationType): boolean =>\n        savedArticle.subDocumentIdList.includes(articleId)\n    );\n}\n\nexport function renderParentList(\n    article: ArticleType,\n    savedArticleList: Array<ArticleForValidationType>\n): Array<JSX.Element> {\n    const parentList: Array<JSX.Element> = getParentList(article, savedArticleList).map(\n        (savedArticle: ArticleForValidationType, index: number): JSX.Element => {\n            const {id, title, slug} = savedArticle;\n\n            return (\n                <Text key={id}>\n                    {index > 0 ? ', ' : null}\n                    <Link to={getArticleLinkToViewClient(slug)}>{title}</Link>\n                    &nbsp;|&nbsp;\n                    <Link to={getArticleLinkToEdit(id)}>{slug}</Link>\n                </Text>\n            );\n        }\n    );\n\n    if (parentList.length > 0) {\n        return parentList;\n    }\n\n    return [<Text key=\"no-parents\">no parents</Text>];\n}\n\nexport function UploadButton(): JSX.Element {\n    return <Button icon={<PlusOutlined />}>Upload</Button>;\n}\n","/* global HTMLInputElement */\nimport {SyntheticEvent} from 'react';\nimport {Typography, Input, Col, Row} from 'antd';\nimport {UploadFile} from 'antd/es/upload/interface';\nconst {Title} = Typography;\n\nimport {ArticleFileType} from '../../../../server/article/article-type';\nimport {Box} from '../../../layout/box/box';\n\nimport {getFileMarkdownByFullInfo} from '../../../layout/markdown/markdown-helper';\n\ntype UploadedFileListItemPropsType = {\n    file: UploadFile<unknown>;\n    fileInfo: ArticleFileType | void;\n    originNode: JSX.Element;\n    setFileTitle: (newFileTitle: string) => void;\n    // uploadedFileList: Array<UploadFile<unknown>>,\n    // actions: { download: () => void; preview: () => void; remove: () => void }\n};\n\nexport function renderUploadedFileListItem(props: UploadedFileListItemPropsType): JSX.Element {\n    const {setFileTitle, fileInfo, originNode, file} = props;\n\n    if (!fileInfo) {\n        return (\n            <Title level={4} type=\"danger\">\n                Can not found file by name: {file.name}\n            </Title>\n        );\n    }\n\n    return (\n        <Box height={112}>\n            {originNode}\n            <Row gutter={8}>\n                <Col span={12}>\n                    <Input\n                        defaultValue={fileInfo.title}\n                        onInput={(evt: SyntheticEvent<HTMLInputElement>) => {\n                            setFileTitle(evt.currentTarget.value.trim());\n                        }}\n                        placeholder=\"Title\"\n                    />\n                </Col>\n                <Col span={12}>\n                    <Input readOnly value={getFileMarkdownByFullInfo(fileInfo, {alt: '', poster: ''})} />\n                </Col>\n            </Row>\n        </Box>\n    );\n}\n","/* global File */\n\nimport {useEffect, useState} from 'react';\n// node_modules/antd/lib/upload/index.d.ts\n// TODO: set declare const Upload: UploadInterface<any>; TO declare const Upload: UploadInterface<unknown>;\n// node_modules/antd/lib/upload/index.d.ts\n// WARNING: set declare const Upload: UploadInterface<any>; TO declare const Upload: UploadInterface<unknown>;\nimport {\n    Button,\n    Checkbox,\n    DatePicker,\n    Divider,\n    Form,\n    Input,\n    message,\n    Popconfirm,\n    Select,\n    Typography,\n    Upload,\n} from 'antd';\nimport {FieldData, ValidateErrorEntity} from 'rc-field-form/lib/interface';\nimport {UploadChangeParam, UploadFile} from 'antd/es/upload/interface';\nimport {Link} from 'react-router-dom';\nimport {QuestionCircleOutlined} from '@ant-design/icons';\nimport {red} from '@ant-design/colors';\nimport dayjs, {Dayjs} from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\n\ndayjs.extend(utc);\n\nimport {\n    ArticleFileType,\n    ArticleType,\n    ArticleTypeEnum,\n    SubDocumentListViewTypeEnum,\n} from '../../../../server/article/article-type';\nimport {validateArticle} from '../../../../server/article/article-validation';\nimport {\n    arrayToStringByComma,\n    humanNormalizeString,\n    makeTagsPreview,\n    stringToArrayByComma,\n    textToSlug,\n} from '../../../util/human';\nimport {useMakeExecutableState} from '../../../util/function';\nimport {PaginationResultType} from '../../../../server/data-base/data-base-type';\nimport {getArticleListPaginationPick} from '../../../service/article/article-api';\nimport {MarkdownInputWrapper} from '../../../layout/markdown-input-wrapper/markdown-input-wrapper';\nimport {IsRender} from '../../../layout/is-render/is-render';\nimport {rootArticleId} from '../../../../server/article/article-const';\nimport {getArticleLinkToViewClient} from '../../../client-component/article/article-helper';\nimport {Box} from '../../../layout/box/box';\nimport {HotKeyModifierEnum, useHotKey} from '../../../util/hot-key';\nimport {makeDefaultArticleFile} from '../../../../server/article/article-helper';\nimport {Spinner} from '../../../layout/spinner/spinner';\n\nimport {\n    getAbsentIdList,\n    getArticleLinkToEdit,\n    getIsImage,\n    handleDeleteArticle,\n    makeHtmlValidator,\n    makeSlugValidator,\n    uploadFile,\n} from './cms-article-helper';\nimport {\n    getParentList,\n    makeFileListItem,\n    makeSubDocumentOption,\n    renderParentList,\n    UploadButton,\n} from './cms-article-layout';\nimport {\n    CmsArticleModeEnum,\n    fileSizeLimit,\n    imageAccept,\n    imageFileSizeLimit,\n    keyForValidationList,\n    noDateUTC,\n} from './cms-article-const';\nimport {ArticleForValidationType} from './cms-article-type';\nimport {renderUploadedFileListItem} from './render-uploaded-file-list-item';\n\nconst {Text, Title} = Typography;\nconst {Option} = Select;\nconst {TextArea} = Input;\n\ntype CmsArticlePropsType = {\n    article: ArticleType;\n    mode: CmsArticleModeEnum;\n    onFinish: (article: ArticleType) => void;\n};\n\n// eslint-disable-next-line complexity, max-statements\nexport function CmsArticle(props: CmsArticlePropsType): JSX.Element {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    const {article, onFinish, mode} = props;\n    const {\n        articleType,\n        content,\n        createdDate,\n        description,\n        descriptionShort,\n        fileList: defaultFileList,\n        hasMetaRobotsNoFollowSeo, // Add/combine <meta name=\"robots\" content=\"nofollow\"/>\n        hasMetaRobotsNoIndexSeo, // Add/combine <meta name=\"robots\" content=\"noindex\"/> and add X-Robots-Tag: noindex\n        id,\n        isActive, // actually temporary \"removed\"\n        isInSiteMapXmlSeo, // has sitemap.xml link to article or not\n        metaDescriptionSeo, // tag <meta name=\"description\" content=\".....\" />\n        metaKeyWordsSeo, // tag <meta name=\"keywords\" content=\".....\" />\n        metaSeo, // actually any html code\n        publishDate: defaultPublishDate,\n        slug,\n        staffArtistList,\n        staffAuthorList,\n        staffCompositorList,\n        staffDirectorList,\n        staffIllustratorList,\n        staffReaderList,\n        subDocumentIdList,\n        subDocumentListViewType,\n        tagList,\n        tagTitleSeo, // tag <title>....</title>\n        title,\n        titleImage: defaultTitleImage,\n        updatedDate,\n    } = article;\n\n    const [form] = Form.useForm<ArticleType>();\n    const [fileList, setFileList] = useState<Array<ArticleFileType>>([...defaultFileList]);\n    const [titleImage, setTitleImage] = useState<ArticleFileType>(defaultTitleImage);\n    const [publishDate, setPublishDate] = useState<string>(defaultPublishDate || new Date().toISOString());\n    const [recommendedSlug, setRecommendedSlug] = useState<string>(textToSlug(title));\n    const [currentArticleState, setCurrentArticleState] = useState<ArticleType>(article);\n    const [isFileLoading, setIsFileLoading] = useState<boolean>(false);\n\n    useHotKey([HotKeyModifierEnum.ctrl], 's', form.submit);\n\n    const {execute: executeArticleListPaginationPick} = useMakeExecutableState<\n        Parameters<typeof getArticleListPaginationPick<keyof ArticleForValidationType>>,\n        PaginationResultType<ArticleForValidationType>\n    >(getArticleListPaginationPick);\n\n    const [savedArticleList, setSavedArticleList] = useState<Array<ArticleForValidationType>>([]);\n\n    useEffect(() => {\n        executeArticleListPaginationPick({}, {pageIndex: 0, pageSize: 0, sort: {title: 1}}, keyForValidationList)\n            .then((data: PaginationResultType<ArticleForValidationType>) => setSavedArticleList(data.list))\n            .catch((error: Error) => {\n                console.log(error);\n                message.error('Can not fetch article list.');\n            });\n    }, [executeArticleListPaginationPick]);\n\n    function onFinishForm(rawValues: ArticleType) {\n        const values: ArticleType = {\n            ...rawValues,\n            fileList,\n            publishDate,\n            staffArtistList: stringToArrayByComma(rawValues.staffArtistList),\n            staffAuthorList: stringToArrayByComma(rawValues.staffAuthorList),\n            staffCompositorList: stringToArrayByComma(rawValues.staffCompositorList),\n            staffDirectorList: stringToArrayByComma(rawValues.staffDirectorList),\n            staffIllustratorList: stringToArrayByComma(rawValues.staffIllustratorList),\n            staffReaderList: stringToArrayByComma(rawValues.staffReaderList),\n            tagList: stringToArrayByComma(rawValues.tagList),\n            title: humanNormalizeString(rawValues.title),\n            titleImage,\n        };\n        // validate form\n        const [isValidArticle, validateFunction] = validateArticle(values);\n\n        console.info('validateFunction.errors');\n        console.info(validateFunction.errors);\n        console.log('onFinishForm, is valid -', isValidArticle);\n        console.log('---> onFinishForm, values -', values);\n        console.log('---> onFinishForm, fileList -', fileList);\n\n        if (isValidArticle) {\n            onFinish(values);\n            return;\n        }\n\n        message.error(JSON.stringify(validateFunction.errors));\n    }\n\n    function onFinishFailedForm(errorInfo: ValidateErrorEntity<ArticleType>) {\n        message.error(JSON.stringify(errorInfo.errorFields));\n        console.log('onFinishFailedForm:', errorInfo);\n        console.log('onFinishFailedForm:', article);\n    }\n\n    function onValuesChangeForm(changedValues: unknown, values: ArticleType) {\n        setRecommendedSlug(textToSlug(values.title));\n        setCurrentArticleState(values);\n        console.log('onValuesChangeForm:', changedValues, values);\n        console.log('onValuesChangeForm:', article);\n    }\n\n    function onFieldsChangeForm(changedFields: Array<FieldData>, allFields: Array<FieldData>) {\n        console.log('onFieldsChangeForm:', changedFields, allFields);\n        console.log('onFieldsChangeForm:', article);\n    }\n\n    function handleChangeFileList(info: UploadChangeParam<UploadFile<unknown>>) {\n        const {file} = info;\n\n        if (file.status === 'removed') {\n            setFileList((currentFileList: Array<ArticleFileType>): Array<ArticleFileType> => {\n                return currentFileList.filter((fileInfo: ArticleFileType): boolean => fileInfo.name !== file.name);\n            });\n        }\n\n        console.log('handleChangeFileList:', info);\n        console.log('handleChangeFileList:', article);\n    }\n\n    function handleChangeTitleImage(info: UploadChangeParam<UploadFile<unknown>>) {\n        const {file} = info;\n\n        if (file.status === 'removed') {\n            setTitleImage(makeDefaultArticleFile());\n        }\n\n        console.log('handleChangeTitleImage:', info);\n        console.log('handleChangeTitleImage:', article);\n    }\n\n    const absentIdList = getAbsentIdList(subDocumentIdList, savedArticleList);\n    const parentList = getParentList(article, savedArticleList);\n    const hasParent = parentList.length > 0;\n    const isDisableToDelete = hasParent || id === rootArticleId;\n\n    return (\n        <Form<ArticleType>\n            autoComplete=\"off\"\n            form={form}\n            initialValues={{remember: true}}\n            layout=\"vertical\"\n            name=\"article\"\n            onFieldsChange={onFieldsChangeForm}\n            onFinish={onFinishForm}\n            onFinishFailed={onFinishFailedForm}\n            onValuesChange={onValuesChangeForm}\n            scrollToFirstError\n        >\n            <Spinner isShow={isFileLoading} position=\"fixed\" />\n            <IsRender isRender={absentIdList.length > 0}>\n                <Title level={4} type=\"danger\">\n                    Document has missing children, children Id:&nbsp;{absentIdList.join(', ')}\n                </Title>\n            </IsRender>\n\n            <Box padding={[8, 0]}>\n                <Text>\n                    Article:&nbsp;\n                    <Link to={getArticleLinkToViewClient(slug)}>{title}</Link>\n                    &nbsp;|&nbsp;\n                    <Link to={getArticleLinkToEdit(id)}>{slug}</Link>\n                </Text>\n            </Box>\n\n            <Box padding={[8, 0, 16]}>\n                <Text>Parents:&nbsp;{renderParentList(article, savedArticleList)}</Text>\n            </Box>\n\n            <Form.Item hidden initialValue={id} label={`Article id: ${id}`} name=\"id\">\n                <Input disabled />\n            </Form.Item>\n\n            <Form.Item label={`Title image (to 16MB): ${titleImage.name}`}>\n                <Upload<unknown>\n                    accept={imageAccept}\n                    action={async (file: File): Promise<string> => {\n                        try {\n                            setIsFileLoading(true);\n\n                            const uploadedFileInfo: ArticleFileType = await uploadFile(file, imageFileSizeLimit);\n\n                            setTitleImage(uploadedFileInfo);\n                        } catch (error: unknown) {\n                            const errorMessage = error instanceof Error ? error.message : 'Too big file';\n\n                            message.error(errorMessage);\n                        } finally {\n                            setIsFileLoading(false);\n                        }\n\n                        // just prevent extra request to our server\n                        return 'https://dev.null/dev/null';\n                    }}\n                    fileList={titleImage.size > 0 ? [titleImage].map(makeFileListItem) : []}\n                    itemRender={(originNode: JSX.Element, file: UploadFile<unknown>): JSX.Element => {\n                        return renderUploadedFileListItem({\n                            file,\n                            fileInfo: titleImage,\n                            originNode,\n                            setFileTitle: (newFileTitle: string) => {\n                                setTitleImage({\n                                    ...titleImage,\n                                    title: newFileTitle,\n                                });\n                            },\n                        });\n                    }}\n                    listType=\"picture\"\n                    maxCount={1}\n                    onChange={handleChangeTitleImage}\n                >\n                    {titleImage.size > 0 ? null : <UploadButton />}\n                </Upload>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={title}\n                label=\"Title:\"\n                name=\"title\"\n                rules={[{message: 'Required!', required: true}]}\n            >\n                <Input placeholder=\"Title\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={slug}\n                label={`Slug, avoid spec symbols, slug from title: ${recommendedSlug}`}\n                name=\"slug\"\n                normalize={textToSlug}\n                rules={makeSlugValidator({id, mode, savedArticleList})}\n            >\n                <Input disabled={savedArticleList.length === 0} placeholder=\"slug-is-here\" />\n            </Form.Item>\n\n            <Form.Item initialValue={articleType} label=\"Article type:\" name=\"articleType\">\n                <Select<ArticleTypeEnum>>\n                    <Option value={ArticleTypeEnum.article}>Article</Option>\n                    <Option value={ArticleTypeEnum.container}>Container</Option>\n                    <Option value={ArticleTypeEnum.audioList}>Audio List</Option>\n                    <Option value={ArticleTypeEnum.audioSingle}>Audio Single</Option>\n                    <Option value={ArticleTypeEnum.audioChildrenList}>Audio Children List</Option>\n                </Select>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(tagList)}\n                label={`Tag List, use comma \",\" to divide: ${makeTagsPreview(currentArticleState.tagList)}`}\n                name=\"tagList\"\n            >\n                <Input placeholder=\"Tag1, Tag2, Tag3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={subDocumentListViewType}\n                label=\"Sub Document List View Type:\"\n                name=\"subDocumentListViewType\"\n            >\n                <Select<SubDocumentListViewTypeEnum>>\n                    <Option value={SubDocumentListViewTypeEnum.header}>Header</Option>\n                    <Option value={SubDocumentListViewTypeEnum.headerImage}>Header-Image</Option>\n                </Select>\n            </Form.Item>\n\n            <Form.Item initialValue={subDocumentIdList} label=\"Sub Document List:\" name=\"subDocumentIdList\">\n                <Select<Array<string>>\n                    disabled={savedArticleList.length === 0}\n                    filterOption\n                    loading={savedArticleList.length === 0}\n                    mode=\"multiple\"\n                    optionFilterProp=\"title\"\n                    placeholder=\"Sub Document Id...\"\n                >\n                    {savedArticleList.map(makeSubDocumentOption)}\n                </Select>\n            </Form.Item>\n\n            <MarkdownInputWrapper mdInput={currentArticleState.content}>\n                <Form.Item initialValue={content} label=\"Content, use markdown:\" name=\"content\">\n                    <TextArea placeholder=\"# Markdown...\" rows={10} />\n                </Form.Item>\n            </MarkdownInputWrapper>\n\n            <MarkdownInputWrapper mdInput={currentArticleState.description}>\n                <Form.Item initialValue={description} label=\"Description, use markdown:\" name=\"description\">\n                    <TextArea placeholder=\"Some description is here...\" rows={3} />\n                </Form.Item>\n            </MarkdownInputWrapper>\n\n            <Form.Item\n                initialValue={descriptionShort}\n                label=\"Short description, plain text only, used for Open Graph:\"\n                name=\"descriptionShort\"\n            >\n                <TextArea placeholder=\"Some short description is here...\" rows={3} />\n            </Form.Item>\n\n            <Form.Item label={`Files (image to 16MB, other to 75MB): ${fileList.length}`}>\n                <Upload<unknown>\n                    // accept={fileAccept}\n                    action={async (file: File): Promise<string> => {\n                        try {\n                            setIsFileLoading(true);\n\n                            const sizeLimit = getIsImage(file.name) ? imageFileSizeLimit : fileSizeLimit;\n                            const uploadedFileInfo: ArticleFileType = await uploadFile(file, sizeLimit);\n\n                            setFileList((currentFileList: Array<ArticleFileType>): Array<ArticleFileType> => {\n                                return [...currentFileList, uploadedFileInfo];\n                            });\n                        } catch (error: unknown) {\n                            const errorMessage = error instanceof Error ? error.message : 'Too big file';\n\n                            message.error(errorMessage);\n                        } finally {\n                            setIsFileLoading(false);\n                        }\n\n                        // just prevent extra request to our server\n                        return 'https://dev.null/dev/null';\n                    }}\n                    fileList={fileList.map(makeFileListItem)}\n                    // itemRender={renderUploadedFileListItem}\n                    itemRender={(originNode: JSX.Element, file: UploadFile<unknown>): JSX.Element => {\n                        const fileInfo = fileList.find(\n                            (fileInfoIList: ArticleFileType): boolean => fileInfoIList.name === file.name\n                        );\n\n                        return renderUploadedFileListItem({\n                            file,\n                            fileInfo,\n                            originNode,\n                            setFileTitle: (newFileTitle: string) => {\n                                if (fileInfo) {\n                                    fileInfo.title = newFileTitle;\n                                    setFileList([...fileList]);\n                                }\n                            },\n                        });\n                    }}\n                    listType=\"picture\"\n                    onChange={handleChangeFileList}\n                >\n                    <UploadButton />\n                </Upload>\n            </Form.Item>\n\n            <Form.Item initialValue={dayjs.utc(publishDate)} label=\"Publish date UTC-0:\" name=\"publishDate\">\n                <DatePicker onOk={(date: Dayjs): void => setPublishDate(date.toISOString())} showTime />\n            </Form.Item>\n\n            <Form.Item\n                // set on server\n                initialValue={createdDate || noDateUTC}\n                label=\"Created date UTC-0:\"\n                name=\"createdDate\"\n            >\n                <Input disabled />\n            </Form.Item>\n\n            <Form.Item\n                // set on server\n                initialValue={updatedDate || noDateUTC}\n                label=\"Updated date UTC-0:\"\n                name=\"updatedDate\"\n            >\n                <Input disabled />\n            </Form.Item>\n\n            <Divider orientation=\"center\">SEO</Divider>\n\n            <Form.Item initialValue={tagTitleSeo} label=\"Meta Title, tag <title>...</title>:\" name=\"tagTitleSeo\">\n                <Input placeholder=\"Title...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={hasMetaRobotsNoFollowSeo}\n                label=\"Has Meta Robots No Follow:\"\n                name=\"hasMetaRobotsNoFollowSeo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox>Add/combine &lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot; /&gt;</Checkbox>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={hasMetaRobotsNoIndexSeo}\n                label=\"Has Meta Robots No Index:\"\n                name=\"hasMetaRobotsNoIndexSeo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox>\n                    Add/combine &lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;/&gt; and add X-Robots-Tag:\n                    noindex\n                </Checkbox>\n            </Form.Item>\n\n            <Form.Item initialValue={isActive} label=\"Is Active:\" name=\"isActive\" valuePropName=\"checked\">\n                <Checkbox>Uncheck to temporary &quot;remove&quot; (also remove from sitemap.xml)</Checkbox>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={isInSiteMapXmlSeo}\n                label=\"Is In Site Map Xml:\"\n                name=\"isInSiteMapXmlSeo\"\n                valuePropName=\"checked\"\n            >\n                <Checkbox>Does sitemap.xml has link to article or not</Checkbox>\n            </Form.Item>\n\n            <Form.Item\n                initialValue={metaDescriptionSeo}\n                label={'Meta Description, tag <meta name=\"description\" content=\"...\" />:'}\n                name=\"metaDescriptionSeo\"\n            >\n                <Input placeholder=\"Description...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={metaKeyWordsSeo}\n                label={'Meta KeyWords, tag <meta name=\"keywords\" content=\"...\" />:'}\n                name=\"metaKeyWordsSeo\"\n            >\n                <Input placeholder=\"KeyWords...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={metaSeo}\n                label=\"Meta, actually any valid html code:\"\n                name=\"metaSeo\"\n                rules={makeHtmlValidator()}\n            >\n                <TextArea placeholder=\"Additional meta tags...\" rows={3} />\n            </Form.Item>\n\n            <Divider orientation=\"center\">Staff</Divider>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffArtistList)}\n                label={`Staff Artists, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffArtistList\n                )}`}\n                name=\"staffArtistList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffAuthorList)}\n                label={`Staff Authors, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffAuthorList\n                )}`}\n                name=\"staffAuthorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffCompositorList)}\n                label={`Staff Compositors, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffCompositorList\n                )}`}\n                name=\"staffCompositorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffDirectorList)}\n                label={`Staff Directors, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffDirectorList\n                )}`}\n                name=\"staffDirectorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffIllustratorList)}\n                label={`Staff Illustrators, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffIllustratorList\n                )}`}\n                name=\"staffIllustratorList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item\n                initialValue={arrayToStringByComma(staffReaderList)}\n                label={`Staff Readers, use comma \",\" to divide: ${makeTagsPreview(\n                    currentArticleState.staffReaderList\n                )}`}\n                name=\"staffReaderList\"\n            >\n                <Input placeholder=\"Name1, Name2, Name3...\" />\n            </Form.Item>\n\n            <Form.Item>\n                <Button htmlType=\"submit\" type=\"primary\">\n                    Submit (ctrl+S)\n                </Button>\n                <IsRender isRender={mode === CmsArticleModeEnum.edit}>\n                    &nbsp;\n                    <Popconfirm\n                        cancelText=\"No\"\n                        disabled={isDisableToDelete}\n                        icon={<QuestionCircleOutlined style={{color: red.primary}} />}\n                        okText=\"Delete\"\n                        onConfirm={() => handleDeleteArticle(id)}\n                        title=\"Are you sure to delete the article？\"\n                    >\n                        <Button disabled={isDisableToDelete} htmlType=\"button\" type=\"default\">\n                            {isDisableToDelete ? 'Can NOT delete, article has parent' : 'Delete'}\n                        </Button>\n                    </Popconfirm>\n                </IsRender>\n            </Form.Item>\n        </Form>\n    );\n}\n","import {ReactNode} from 'react';\nimport {Layout, Menu} from 'antd';\nimport {Link, useLocation} from 'react-router-dom';\n\nimport 'antd/dist/reset.css';\n\nimport {Box} from '../../../../layout/box/box';\nimport {appRoute} from '../../../../component/app/app-route';\n\nconst {Content} = Layout;\n\ntype CmsPagePropsType = {\n    children: ReactNode;\n};\n\nexport function CmsPage(props: CmsPagePropsType): JSX.Element {\n    const {children} = props;\n    const routerLocation = useLocation();\n\n    return (\n        <Layout>\n            <Box padding={16}>\n                <Menu\n                    defaultSelectedKeys={[routerLocation.pathname]}\n                    items={[\n                        {\n                            key: appRoute.articleList.path,\n                            label: <Link to={appRoute.articleList.path}>List</Link>,\n                        },\n                        {\n                            key: appRoute.articleCreate.path,\n                            label: <Link to={appRoute.articleCreate.path}>Create</Link>,\n                        },\n                        {\n                            key: appRoute.articleTree.path,\n                            label: <Link to={appRoute.articleTree.path}>Tree</Link>,\n                        },\n                    ]}\n                    mode=\"horizontal\"\n                />\n            </Box>\n\n            <Box padding={16}>\n                <Content>{children}</Content>\n            </Box>\n\n            {/* <Footer>Footer is here</Footer> */}\n        </Layout>\n    );\n}\n"],"names":["makeCssArray","value","Array","isArray","length","console","error","Box","props","tagName","TagName","children","margin","padding","width","height","boxSizing","backgroundColor","display","marginTop","marginRight","marginBottom","marginLeft","paddingTop","paddingRight","paddingBottom","paddingLeft","map","style","CmsArticleModeEnum","keyForValidationList","noDateUTC","imageAccept","imageFileSizeLimit","fileSizeLimit","async","uploadFile","file","fileSizeLimitBytes","formData","FormData","size","Error","append","fileInfo","body","credentials","method","pathToFile","name","type","naturalHeight","naturalWidth","pathToImage","image","Image","Promise","resolve","reject","addEventListener","src","fetchImage","duration","pathToAudio","audio","Audio","preload","fetchAudio","videoWidth","videoHeight","pathToVideo","video","document","createElement","fetchVideo","makeSlugValidator","data","id","mode","savedArticleList","message","required","validator","rule","savedArticleBySlugList","filter","savedArticle","slug","savedArticleBySlugListLength","isSavedArticle","savedArticleForValidation","makeHtmlValidator","wrapper","innerHTML","trim","getArticleLinkToEdit","articleId","getIsImage","fileName","fileExtension","includes","split","pop","toLowerCase","getFileExtension","getAbsentIdList","subDocumentIdList","some","article","handleDeleteArticle","then","location","reload","catch","MarkdownInputWrapper","mdInput","className","gutter","span","articleTitle","Option","Text","makeFileListItem","fileInfoName","status","uid","url","makeSubDocumentOption","articleForValidation","title","getParentList","renderParentList","parentList","index","Link","to","UploadButton","icon","PlusOutlined","Title","renderUploadedFileListItem","setFileTitle","originNode","defaultValue","onInput","evt","currentTarget","placeholder","readOnly","alt","poster","level","TextArea","CmsArticle","onFinish","articleType","content","createdDate","description","descriptionShort","fileList","defaultFileList","hasMetaRobotsNoFollowSeo","hasMetaRobotsNoIndexSeo","isActive","isInSiteMapXmlSeo","metaDescriptionSeo","metaKeyWordsSeo","metaSeo","publishDate","defaultPublishDate","staffArtistList","staffAuthorList","staffCompositorList","staffDirectorList","staffIllustratorList","staffReaderList","subDocumentListViewType","tagList","tagTitleSeo","titleImage","defaultTitleImage","updatedDate","form","setFileList","useState","setTitleImage","setPublishDate","Date","toISOString","recommendedSlug","setRecommendedSlug","currentArticleState","setCurrentArticleState","isFileLoading","setIsFileLoading","submit","execute","executeArticleListPaginationPick","setSavedArticleList","useEffect","pageIndex","pageSize","sort","list","absentIdList","isDisableToDelete","autoComplete","initialValues","remember","layout","onFieldsChange","changedFields","allFields","rawValues","values","human","isValidArticle","validateFunction","info","errors","JSON","stringify","onFinishFailed","errorInfo","errorFields","onValuesChange","changedValues","scrollToFirstError","isShow","position","isRender","join","hidden","initialValue","label","disabled","accept","action","uploadedFileInfo","errorMessage","itemRender","newFileTitle","listType","maxCount","onChange","rules","normalize","filterOption","loading","optionFilterProp","rows","sizeLimit","currentFileList","find","fileInfoIList","onOk","date","showTime","orientation","valuePropName","htmlType","cancelText","QuestionCircleOutlined","color","okText","onConfirm","Content","CmsPage","routerLocation","defaultSelectedKeys","pathname","items","key"],"sourceRoot":""}